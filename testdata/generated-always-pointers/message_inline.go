// Code generated by bebopc-go; DO NOT EDIT.

package generated

import (
	"github.com/200sc/bebop"
	"github.com/200sc/bebop/iohelp"
	"io"
)

var _ bebop.Record = &MessageInline{}

type MessageInline struct {
	OnOff *bool
}

func (bbp *MessageInline) MarshalBebopTo(buf []byte) int {
	at := 0
	iohelp.WriteUint32Bytes(buf[at:], uint32(bbp.Size()-4))
	at += 4
	if bbp.OnOff != nil {
		buf[at] = 1
		at++
		iohelp.WriteBoolBytes(buf[at:], *bbp.OnOff)
		at += 1
	}
	return at
}

func (bbp *MessageInline) UnmarshalBebop(buf []byte) (err error) {
	at := 0
	_ = iohelp.ReadUint32Bytes(buf[at:])
	buf = buf[4:]
	for {
		switch buf[at] {
		case 1:
			at += 1
			bbp.OnOff = new(bool)
			if len(buf[at:]) < 1 {
				return io.ErrUnexpectedEOF
			}
			(*bbp.OnOff) = iohelp.ReadBoolBytes(buf[at:])
			at += 1
		default:
			return nil
		}
	}
}

func (bbp *MessageInline) MustUnmarshalBebop(buf []byte) {
	at := 0
	_ = iohelp.ReadUint32Bytes(buf[at:])
	buf = buf[4:]
	for {
		switch buf[at] {
		case 1:
			at += 1
			bbp.OnOff = new(bool)
			(*bbp.OnOff) = iohelp.ReadBoolBytes(buf[at:])
			at += 1
		default:
			return
		}
	}
}

func (bbp *MessageInline) EncodeBebop(iow io.Writer) (err error) {
	w := iohelp.NewErrorWriter(iow)
	iohelp.WriteUint32(w, uint32(bbp.Size()-4))
	if bbp.OnOff != nil {
		w.Write([]byte{1})
		iohelp.WriteBool(w, *bbp.OnOff)
	}
	w.Write([]byte{0})
	return w.Err
}

func (bbp *MessageInline) DecodeBebop(ior io.Reader) (err error) {
	r := iohelp.NewErrorReader(ior)
	bodyLen := iohelp.ReadUint32(r)
	limitReader := &io.LimitedReader{R: r.Reader, N: int64(bodyLen)}
	for {
		r.Reader = limitReader
		switch iohelp.ReadByte(r) {
		case 1:
			bbp.OnOff = new(bool)
			*bbp.OnOff = iohelp.ReadBool(r)
		default:
			r.Drain()
			return r.Err
		}
	}
}

func (bbp *MessageInline) Size() int {
	bodyLen := 5
	if bbp.OnOff != nil {
		bodyLen += 1
		bodyLen += 1
	}
	return bodyLen
}

func (bbp *MessageInline) MarshalBebop() []byte {
	buf := make([]byte, bbp.Size())
	bbp.MarshalBebopTo(buf)
	return buf
}

func MakeMessageInline(r *iohelp.ErrorReader) (MessageInline, error) {
	v := MessageInline{}
	err := v.DecodeBebop(r)
	return v, err
}

func MakeMessageInlineFromBytes(buf []byte) (MessageInline, error) {
	v := MessageInline{}
	err := v.UnmarshalBebop(buf)
	return v, err
}

func MustMakeMessageInlineFromBytes(buf []byte) MessageInline {
	v := MessageInline{}
	v.MustUnmarshalBebop(buf)
	return v
}

var _ bebop.Record = &MessageInlineWrapper{}

type MessageInlineWrapper struct {
	Bla *MessageInline
}

func (bbp *MessageInlineWrapper) MarshalBebopTo(buf []byte) int {
	at := 0
	iohelp.WriteUint32Bytes(buf[at:], uint32(bbp.Size()-4))
	at += 4
	if bbp.Bla != nil {
		buf[at] = 1
		at++
		(*bbp.Bla).MarshalBebopTo(buf[at:])
		{
			tmp := (*bbp.Bla)
			at += tmp.Size()
		}
		
	}
	return at
}

func (bbp *MessageInlineWrapper) UnmarshalBebop(buf []byte) (err error) {
	at := 0
	_ = iohelp.ReadUint32Bytes(buf[at:])
	buf = buf[4:]
	for {
		switch buf[at] {
		case 1:
			at += 1
			bbp.Bla = new(MessageInline)
			(*bbp.Bla), err = MakeMessageInlineFromBytes(buf[at:])
			if err != nil {
				return err
			}
			{
				tmp := ((*bbp.Bla))
				at += tmp.Size()
			}
			
		default:
			return nil
		}
	}
}

func (bbp *MessageInlineWrapper) MustUnmarshalBebop(buf []byte) {
	at := 0
	_ = iohelp.ReadUint32Bytes(buf[at:])
	buf = buf[4:]
	for {
		switch buf[at] {
		case 1:
			at += 1
			bbp.Bla = new(MessageInline)
			(*bbp.Bla) = MustMakeMessageInlineFromBytes(buf[at:])
			{
				tmp := ((*bbp.Bla))
				at += tmp.Size()
			}
			
		default:
			return
		}
	}
}

func (bbp *MessageInlineWrapper) EncodeBebop(iow io.Writer) (err error) {
	w := iohelp.NewErrorWriter(iow)
	iohelp.WriteUint32(w, uint32(bbp.Size()-4))
	if bbp.Bla != nil {
		w.Write([]byte{1})
		err = (*bbp.Bla).EncodeBebop(w)
		if err != nil {
			return err
		}
	}
	w.Write([]byte{0})
	return w.Err
}

func (bbp *MessageInlineWrapper) DecodeBebop(ior io.Reader) (err error) {
	r := iohelp.NewErrorReader(ior)
	bodyLen := iohelp.ReadUint32(r)
	limitReader := &io.LimitedReader{R: r.Reader, N: int64(bodyLen)}
	for {
		r.Reader = limitReader
		switch iohelp.ReadByte(r) {
		case 1:
			bbp.Bla = new(MessageInline)
			(*bbp.Bla), err = MakeMessageInline(r)
			if err != nil {
				return err
			}
		default:
			r.Drain()
			return r.Err
		}
	}
}

func (bbp *MessageInlineWrapper) Size() int {
	bodyLen := 5
	if bbp.Bla != nil {
		bodyLen += 1
		{
			tmp := (*bbp.Bla)
			bodyLen += tmp.Size()
		}
		
	}
	return bodyLen
}

func (bbp *MessageInlineWrapper) MarshalBebop() []byte {
	buf := make([]byte, bbp.Size())
	bbp.MarshalBebopTo(buf)
	return buf
}

func MakeMessageInlineWrapper(r *iohelp.ErrorReader) (MessageInlineWrapper, error) {
	v := MessageInlineWrapper{}
	err := v.DecodeBebop(r)
	return v, err
}

func MakeMessageInlineWrapperFromBytes(buf []byte) (MessageInlineWrapper, error) {
	v := MessageInlineWrapper{}
	err := v.UnmarshalBebop(buf)
	return v, err
}

func MustMakeMessageInlineWrapperFromBytes(buf []byte) MessageInlineWrapper {
	v := MessageInlineWrapper{}
	v.MustUnmarshalBebop(buf)
	return v
}

