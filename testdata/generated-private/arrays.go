// Code generated by bebopc-go; DO NOT EDIT.

package generated

import (
	"github.com/200sc/bebop"
	"github.com/200sc/bebop/iohelp"
	"io"
)

var _ bebop.Record = &arraySamples{}

type arraySamples struct {
	bytes [][][]byte
	bytes2 [][][]byte
}

func (bbp arraySamples) MarshalBebopTo(buf []byte) int {
	at := 0
	iohelp.WriteUint32Bytes(buf[at:], uint32(len(bbp.bytes)))
	at += 4
	for _, v1 := range bbp.bytes {
		iohelp.WriteUint32Bytes(buf[at:], uint32(len(v1)))
		at += 4
		for _, v2 := range v1 {
			iohelp.WriteUint32Bytes(buf[at:], uint32(len(v2)))
			at += 4
			copy(buf[at:at+len(v2)], v2)
			at += len(v2)
		}
	}
	iohelp.WriteUint32Bytes(buf[at:], uint32(len(bbp.bytes2)))
	at += 4
	for _, v1 := range bbp.bytes2 {
		iohelp.WriteUint32Bytes(buf[at:], uint32(len(v1)))
		at += 4
		for _, v2 := range v1 {
			iohelp.WriteUint32Bytes(buf[at:], uint32(len(v2)))
			at += 4
			copy(buf[at:at+len(v2)], v2)
			at += len(v2)
		}
	}
	return at
}

func (bbp *arraySamples) UnmarshalBebop(buf []byte) (err error) {
	at := 0
	if len(buf[at:]) < 4 {
		return io.ErrUnexpectedEOF
	}
	bbp.bytes = make([][][]byte, iohelp.ReadUint32Bytes(buf[at:]))
	at += 4
	for i1 := range bbp.bytes {
		if len(buf[at:]) < 4 {
			return io.ErrUnexpectedEOF
		}
		(bbp.bytes)[i1] = make([][]byte, iohelp.ReadUint32Bytes(buf[at:]))
		at += 4
		for i2 := range (bbp.bytes)[i1] {
			if len(buf[at:]) < 4 {
				return io.ErrUnexpectedEOF
			}
			((bbp.bytes)[i1])[i2] = make([]byte, iohelp.ReadUint32Bytes(buf[at:]))
			at += 4
			if len(buf[at:]) < len(((bbp.bytes)[i1])[i2])*1 {
				return io.ErrUnexpectedEOF
			}
			copy(((bbp.bytes)[i1])[i2], buf[at:at+len(((bbp.bytes)[i1])[i2])])
			at += len(((bbp.bytes)[i1])[i2])
		}
	}
	if len(buf[at:]) < 4 {
		return io.ErrUnexpectedEOF
	}
	bbp.bytes2 = make([][][]byte, iohelp.ReadUint32Bytes(buf[at:]))
	at += 4
	for i1 := range bbp.bytes2 {
		if len(buf[at:]) < 4 {
			return io.ErrUnexpectedEOF
		}
		(bbp.bytes2)[i1] = make([][]byte, iohelp.ReadUint32Bytes(buf[at:]))
		at += 4
		for i2 := range (bbp.bytes2)[i1] {
			if len(buf[at:]) < 4 {
				return io.ErrUnexpectedEOF
			}
			((bbp.bytes2)[i1])[i2] = make([]byte, iohelp.ReadUint32Bytes(buf[at:]))
			at += 4
			if len(buf[at:]) < len(((bbp.bytes2)[i1])[i2])*1 {
				return io.ErrUnexpectedEOF
			}
			copy(((bbp.bytes2)[i1])[i2], buf[at:at+len(((bbp.bytes2)[i1])[i2])])
			at += len(((bbp.bytes2)[i1])[i2])
		}
	}
	return nil
}

func (bbp *arraySamples) MustUnmarshalBebop(buf []byte) {
	at := 0
	bbp.bytes = make([][][]byte, iohelp.ReadUint32Bytes(buf[at:]))
	at += 4
	for i1 := range bbp.bytes {
		(bbp.bytes)[i1] = make([][]byte, iohelp.ReadUint32Bytes(buf[at:]))
		at += 4
		for i2 := range (bbp.bytes)[i1] {
			((bbp.bytes)[i1])[i2] = make([]byte, iohelp.ReadUint32Bytes(buf[at:]))
			at += 4
			copy(((bbp.bytes)[i1])[i2], buf[at:at+len(((bbp.bytes)[i1])[i2])])
			at += len(((bbp.bytes)[i1])[i2])
		}
	}
	bbp.bytes2 = make([][][]byte, iohelp.ReadUint32Bytes(buf[at:]))
	at += 4
	for i1 := range bbp.bytes2 {
		(bbp.bytes2)[i1] = make([][]byte, iohelp.ReadUint32Bytes(buf[at:]))
		at += 4
		for i2 := range (bbp.bytes2)[i1] {
			((bbp.bytes2)[i1])[i2] = make([]byte, iohelp.ReadUint32Bytes(buf[at:]))
			at += 4
			copy(((bbp.bytes2)[i1])[i2], buf[at:at+len(((bbp.bytes2)[i1])[i2])])
			at += len(((bbp.bytes2)[i1])[i2])
		}
	}
}

func (bbp arraySamples) EncodeBebop(iow io.Writer) (err error) {
	w := iohelp.NewErrorWriter(iow)
	iohelp.WriteUint32(w, uint32(len(bbp.bytes)))
	for _, elem := range bbp.bytes {
		iohelp.WriteUint32(w, uint32(len(elem)))
		for _, elem := range elem {
			iohelp.WriteUint32(w, uint32(len(elem)))
			w.Write(elem)
		}
	}
	iohelp.WriteUint32(w, uint32(len(bbp.bytes2)))
	for _, elem := range bbp.bytes2 {
		iohelp.WriteUint32(w, uint32(len(elem)))
		for _, elem := range elem {
			iohelp.WriteUint32(w, uint32(len(elem)))
			w.Write(elem)
		}
	}
	return w.Err
}

func (bbp *arraySamples) DecodeBebop(ior io.Reader) (err error) {
	r := iohelp.NewErrorReader(ior)
	bbp.bytes = make([][][]byte, iohelp.ReadUint32(r))
	for i1 := range bbp.bytes {
		(bbp.bytes[i1]) = make([][]byte, iohelp.ReadUint32(r))
		for i2 := range (bbp.bytes[i1]) {
			((bbp.bytes[i1])[i2]) = make([]byte, iohelp.ReadUint32(r))
			r.Read(((bbp.bytes[i1])[i2]))
		}
	}
	bbp.bytes2 = make([][][]byte, iohelp.ReadUint32(r))
	for i1 := range bbp.bytes2 {
		(bbp.bytes2[i1]) = make([][]byte, iohelp.ReadUint32(r))
		for i2 := range (bbp.bytes2[i1]) {
			((bbp.bytes2[i1])[i2]) = make([]byte, iohelp.ReadUint32(r))
			r.Read(((bbp.bytes2[i1])[i2]))
		}
	}
	return r.Err
}

func (bbp arraySamples) Size() int {
	bodyLen := 0
	bodyLen += 4
	for _, elem := range bbp.bytes {
		bodyLen += 4
		for _, elem := range elem {
			bodyLen += 4
			bodyLen += len(elem) * 1
		}
	}
	bodyLen += 4
	for _, elem := range bbp.bytes2 {
		bodyLen += 4
		for _, elem := range elem {
			bodyLen += 4
			bodyLen += len(elem) * 1
		}
	}
	return bodyLen
}

func (bbp arraySamples) MarshalBebop() []byte {
	buf := make([]byte, bbp.Size())
	bbp.MarshalBebopTo(buf)
	return buf
}

func makearraySamples(r *iohelp.ErrorReader) (arraySamples, error) {
	v := arraySamples{}
	err := v.DecodeBebop(r)
	return v, err
}

func makearraySamplesFromBytes(buf []byte) (arraySamples, error) {
	v := arraySamples{}
	err := v.UnmarshalBebop(buf)
	return v, err
}

func mustMakearraySamplesFromBytes(buf []byte) arraySamples {
	v := arraySamples{}
	v.MustUnmarshalBebop(buf)
	return v
}

