// Code generated by bebopc-go; DO NOT EDIT.

package generated

import (
	"io"
	"github.com/200sc/bebop"
	"github.com/200sc/bebop/iohelp"
)

var _ bebop.Record = &exampleMessage{}

type exampleMessage struct {
	x *byte
	y *int16
	z *int32
}

func (bbp exampleMessage) MarshalBebopTo(buf []byte) int {
	at := 0
	iohelp.WriteUint32Bytes(buf[at:], uint32(bbp.Size()-4))
	at += 4
	if bbp.x != nil {
		buf[at] = 1
		at++
		iohelp.WriteByteBytes(buf[at:], *bbp.x)
		at += 1
	}
	if bbp.y != nil {
		buf[at] = 2
		at++
		iohelp.WriteInt16Bytes(buf[at:], *bbp.y)
		at += 2
	}
	if bbp.z != nil {
		buf[at] = 3
		at++
		iohelp.WriteInt32Bytes(buf[at:], *bbp.z)
		at += 4
	}
	return at
}

func (bbp *exampleMessage) UnmarshalBebop(buf []byte) (err error) {
	at := 0
	_ = iohelp.ReadUint32Bytes(buf[at:])
	buf = buf[4:]
	for {
		switch buf[at] {
		case 1:
			at += 1
			bbp.x = new(byte)
			if len(buf[at:]) < 1 {
				 return io.ErrUnexpectedEOF
			}
			(*bbp.x) = iohelp.ReadByteBytes(buf[at:])
			at += 1
		case 2:
			at += 1
			bbp.y = new(int16)
			if len(buf[at:]) < 2 {
				 return io.ErrUnexpectedEOF
			}
			(*bbp.y) = iohelp.ReadInt16Bytes(buf[at:])
			at += 2
		case 3:
			at += 1
			bbp.z = new(int32)
			if len(buf[at:]) < 4 {
				 return io.ErrUnexpectedEOF
			}
			(*bbp.z) = iohelp.ReadInt32Bytes(buf[at:])
			at += 4
		default:
			return nil
		}
	}
}

func (bbp *exampleMessage) MustUnmarshalBebop(buf []byte) {
	at := 0
	_ = iohelp.ReadUint32Bytes(buf[at:])
	buf = buf[4:]
	for {
		switch buf[at] {
		case 1:
			at += 1
			bbp.x = new(byte)
			(*bbp.x) = iohelp.ReadByteBytes(buf[at:])
			at += 1
		case 2:
			at += 1
			bbp.y = new(int16)
			(*bbp.y) = iohelp.ReadInt16Bytes(buf[at:])
			at += 2
		case 3:
			at += 1
			bbp.z = new(int32)
			(*bbp.z) = iohelp.ReadInt32Bytes(buf[at:])
			at += 4
		default:
			return
		}
	}
}

func (bbp exampleMessage) EncodeBebop(iow io.Writer) (err error) {
	w := iohelp.NewErrorWriter(iow)
	iohelp.WriteUint32(w, uint32(bbp.Size()-4))
	if bbp.x != nil {
		w.Write([]byte{1})
		iohelp.WriteByte(w, *bbp.x)
	}
	if bbp.y != nil {
		w.Write([]byte{2})
		iohelp.WriteInt16(w, *bbp.y)
	}
	if bbp.z != nil {
		w.Write([]byte{3})
		iohelp.WriteInt32(w, *bbp.z)
	}
	w.Write([]byte{0})
	return w.Err
}

func (bbp *exampleMessage) DecodeBebop(ior io.Reader) (err error) {
	r := iohelp.NewErrorReader(ior)
	bodyLen := iohelp.ReadUint32(r)
	r.Reader = &io.LimitedReader{R:r.Reader, N:int64(bodyLen)}
	for {
		switch iohelp.ReadByte(r) {
		case 1:
			bbp.x = new(byte)
			*bbp.x = iohelp.ReadByte(r)
		case 2:
			bbp.y = new(int16)
			*bbp.y = iohelp.ReadInt16(r)
		case 3:
			bbp.z = new(int32)
			*bbp.z = iohelp.ReadInt32(r)
		default:
			io.ReadAll(r)
			return r.Err
		}
	}
}

func (bbp exampleMessage) Size() int {
	bodyLen := 5
	if bbp.x != nil {
		bodyLen += 1
		bodyLen += 1
	}
	if bbp.y != nil {
		bodyLen += 1
		bodyLen += 2
	}
	if bbp.z != nil {
		bodyLen += 1
		bodyLen += 4
	}
	return bodyLen
}

func (bbp exampleMessage) MarshalBebop() []byte {
	buf := make([]byte, bbp.Size())
	bbp.MarshalBebopTo(buf)
	return buf
}

func makeexampleMessage(r iohelp.ErrorReader) (exampleMessage, error) {
	v := exampleMessage{}
	err := v.DecodeBebop(r)
	return v, err
}

func makeexampleMessageFromBytes(buf []byte) (exampleMessage, error) {
	v := exampleMessage{}
	err := v.UnmarshalBebop(buf)
	return v, err
}

func mustMakeexampleMessageFromBytes(buf []byte) exampleMessage {
	v := exampleMessage{}
	v.MustUnmarshalBebop(buf)
	return v
}

