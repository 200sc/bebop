// Code generated by bebopc-go; DO NOT EDIT.

package generated

import (
	"github.com/200sc/bebop"
	"github.com/200sc/bebop/iohelp"
	"io"
)

var _ bebop.Record = &ArrayOfStrings{}

type ArrayOfStrings struct {
	Strings []string
}

func (bbp ArrayOfStrings) MarshalBebopTo(buf []byte) int {
	at := 0
	iohelp.WriteUint32Bytes(buf[at:], uint32(len(bbp.Strings)))
	at += 4
	for _, v1 := range bbp.Strings {
		iohelp.WriteUint32Bytes(buf[at:], uint32(len(v1)))
		copy(buf[at+4:at+4+len(v1)], []byte(v1))
		at += 4 + len(v1)
	}
	return at
}

func (bbp *ArrayOfStrings) UnmarshalBebop(buf []byte) (err error) {
	at := 0
	if len(buf[at:]) < 4 {
		return io.ErrUnexpectedEOF
	}
	bbp.Strings = make([]string, iohelp.ReadUint32Bytes(buf[at:]))
	at += 4
	for i1 := range bbp.Strings {
		(bbp.Strings)[i1], err = iohelp.ReadStringBytes(buf[at:])
		if err != nil {
			return err
		}
		at += 4 + len((bbp.Strings)[i1])
	}
	return nil
}

func (bbp *ArrayOfStrings) MustUnmarshalBebop(buf []byte) {
	at := 0
	bbp.Strings = make([]string, iohelp.ReadUint32Bytes(buf[at:]))
	at += 4
	for i1 := range bbp.Strings {
		(bbp.Strings)[i1] = iohelp.MustReadStringBytes(buf[at:])
		at += 4 + len((bbp.Strings)[i1])
	}
}

func (bbp ArrayOfStrings) EncodeBebop(iow io.Writer) (err error) {
	w := iohelp.NewErrorWriter(iow)
	iohelp.WriteUint32(w, uint32(len(bbp.Strings)))
	for _, elem := range bbp.Strings {
		iohelp.WriteUint32(w, uint32(len(elem)))
		w.Write([]byte(elem))
	}
	return w.Err
}

func (bbp *ArrayOfStrings) DecodeBebop(ior io.Reader) (err error) {
	r := iohelp.NewErrorReader(ior)
	bbp.Strings = make([]string, iohelp.ReadUint32(r))
	for i1 := range bbp.Strings {
		(bbp.Strings[i1]) = iohelp.ReadString(r)
	}
	return r.Err
}

func (bbp ArrayOfStrings) Size() int {
	bodyLen := 0
	bodyLen += 4
	for _, elem := range bbp.Strings {
		bodyLen += 4 + len(elem)
	}
	return bodyLen
}

func (bbp ArrayOfStrings) MarshalBebop() []byte {
	buf := make([]byte, bbp.Size())
	bbp.MarshalBebopTo(buf)
	return buf
}

func MakeArrayOfStrings(r iohelp.ErrorReader) (ArrayOfStrings, error) {
	v := ArrayOfStrings{}
	err := v.DecodeBebop(r)
	return v, err
}

func MakeArrayOfStringsFromBytes(buf []byte) (ArrayOfStrings, error) {
	v := ArrayOfStrings{}
	err := v.UnmarshalBebop(buf)
	return v, err
}

func MustMakeArrayOfStringsFromBytes(buf []byte) ArrayOfStrings {
	v := ArrayOfStrings{}
	v.MustUnmarshalBebop(buf)
	return v
}

