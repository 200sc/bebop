// Code generated by bebopc-go; DO NOT EDIT.

package generated

import (
	"encoding/binary"
	"io"

	"github.com/200sc/bebop"
)

var _ bebop.Record = &ArrayOfStrings{}

type ArrayOfStrings struct {
	Strings []string
}

func(bbp ArrayOfStrings) EncodeBebop(w io.Writer) (err error) {
	binary.Write(w, binary.LittleEndian, uint32(len(bbp.Strings)))
	for _, elem := range bbp.Strings {
		binary.Write(w, binary.LittleEndian, uint32(len(elem)))
		w.Write([]byte(elem))
	}
	return nil
}

func(bbp *ArrayOfStrings) DecodeBebop(r io.Reader) (err error) {
	var ln uint32
	ln = uint32(0)
	binary.Read(r, binary.LittleEndian, &ln)
	for i := uint32(0); i < ln; i++ {
		elem1 := new(string)
		*elem1 = bebop.ReadString(r)
		bbp.Strings = append(bbp.Strings, *elem1)
	}
	return nil
}

func(bbp *ArrayOfStrings) bodyLen() (uint32) {
	bodyLen := uint32(0)
	bodyLen += 4
	for _, elem := range bbp.Strings {
		bodyLen += 4
		bodyLen += uint32(len(elem))
	}
	return bodyLen
}

