// Code generated by bebopc-go; DO NOT EDIT.

package generated

import (
	"io"

	"github.com/200sc/bebop"
	"github.com/200sc/bebop/iohelp"
)

var _ bebop.Record = &ArrayOfStrings{}

type ArrayOfStrings struct {
	Strings []string
}

func (bbp ArrayOfStrings) MarshalBebop() []byte {
	buf := make([]byte, bbp.bodyLen())
	bbp.MarshalBebopTo(buf)
	return buf
}

func (bbp ArrayOfStrings) MarshalBebopTo(buf []byte) {
	at := 0
	iohelp.WriteUint32Bytes(buf[at:], uint32(len(bbp.Strings)))
	at += 4
	for _, v1 := range bbp.Strings {
		iohelp.WriteUint32Bytes(buf[at:], uint32(len(v1)))
		at += 4
		copy(buf[at:at+len(v1)], []byte(v1))
		at += len(v1)
	}
}

func (bbp ArrayOfStrings) EncodeBebop(iow io.Writer) (err error) {
	w := iohelp.NewErrorWriter(iow)
	iohelp.WriteUint32(w, uint32(len(bbp.Strings)))
	for _, elem := range bbp.Strings {
		iohelp.WriteUint32(w, uint32(len(elem)))
		w.Write([]byte(elem))
	}
	return w.Err
}

func (bbp *ArrayOfStrings) DecodeBebop(ior io.Reader) (err error) {
	r := iohelp.NewErrorReader(ior)
	bbp.Strings = make([]string, iohelp.ReadUint32(r))
	for i1 := range bbp.Strings {
		(bbp.Strings[i1]) = iohelp.ReadString(r)
	}
	return r.Err
}

func (bbp *ArrayOfStrings) bodyLen() int {
	bodyLen := 0
	bodyLen += 4
	for _, elem := range bbp.Strings {
		bodyLen += 4
		bodyLen += len(elem)
	}
	return bodyLen
}

func makeArrayOfStrings(r iohelp.ErrorReader) (ArrayOfStrings, error) {
	v := ArrayOfStrings{}
	err := v.DecodeBebop(r)
	return v, err
}

