// Code generated by bebopc-go; DO NOT EDIT.

package generated

import (
	"io"

	"github.com/200sc/bebop"
	"github.com/200sc/bebop/iohelp"
)

var _ bebop.Record = &BasicArrays{}

type BasicArrays struct {
	A_bool []bool
	A_byte []byte
	A_int16 []int16
	A_uint16 []uint16
	A_int32 []int32
	A_uint32 []uint32
	A_int64 []int64
	A_uint64 []uint64
	A_float32 []float32
	A_float64 []float64
	A_string []string
	A_guid [][16]byte
}

func (bbp BasicArrays) EncodeBebop(iow io.Writer) (err error) {
	w := iohelp.NewErrorWriter(iow)
	iohelp.WriteUint32(w, uint32(len(bbp.A_bool)))
	for _, elem := range bbp.A_bool {
		iohelp.WriteBool(w, elem)
	}
	iohelp.WriteUint32(w, uint32(len(bbp.A_byte)))
	for _, elem := range bbp.A_byte {
		iohelp.WriteByte(w, elem)
	}
	iohelp.WriteUint32(w, uint32(len(bbp.A_int16)))
	for _, elem := range bbp.A_int16 {
		iohelp.WriteInt16(w, elem)
	}
	iohelp.WriteUint32(w, uint32(len(bbp.A_uint16)))
	for _, elem := range bbp.A_uint16 {
		iohelp.WriteUint16(w, elem)
	}
	iohelp.WriteUint32(w, uint32(len(bbp.A_int32)))
	for _, elem := range bbp.A_int32 {
		iohelp.WriteInt32(w, elem)
	}
	iohelp.WriteUint32(w, uint32(len(bbp.A_uint32)))
	for _, elem := range bbp.A_uint32 {
		iohelp.WriteUint32(w, elem)
	}
	iohelp.WriteUint32(w, uint32(len(bbp.A_int64)))
	for _, elem := range bbp.A_int64 {
		iohelp.WriteInt64(w, elem)
	}
	iohelp.WriteUint32(w, uint32(len(bbp.A_uint64)))
	for _, elem := range bbp.A_uint64 {
		iohelp.WriteUint64(w, elem)
	}
	iohelp.WriteUint32(w, uint32(len(bbp.A_float32)))
	for _, elem := range bbp.A_float32 {
		iohelp.WriteFloat32(w, elem)
	}
	iohelp.WriteUint32(w, uint32(len(bbp.A_float64)))
	for _, elem := range bbp.A_float64 {
		iohelp.WriteFloat64(w, elem)
	}
	iohelp.WriteUint32(w, uint32(len(bbp.A_string)))
	for _, elem := range bbp.A_string {
		iohelp.WriteUint32(w, uint32(len(elem)))
		w.Write([]byte(elem))
	}
	iohelp.WriteUint32(w, uint32(len(bbp.A_guid)))
	for _, elem := range bbp.A_guid {
		iohelp.WriteGUID(w, elem)
	}
	return w.Err
}

func (bbp *BasicArrays) DecodeBebop(ior io.Reader) (err error) {
	r := iohelp.NewErrorReader(ior)
	{
		ln2 := iohelp.ReadUint32(r)
		for i := uint32(0); i < ln2; i++ {
			elem2 := new(bool)
			*elem2 = iohelp.ReadBool(r)
			bbp.A_bool = append(bbp.A_bool, *elem2)
		}
	}
	{
		ln2 := iohelp.ReadUint32(r)
		for i := uint32(0); i < ln2; i++ {
			elem2 := new(byte)
			*elem2 = iohelp.ReadByte(r)
			bbp.A_byte = append(bbp.A_byte, *elem2)
		}
	}
	{
		ln2 := iohelp.ReadUint32(r)
		for i := uint32(0); i < ln2; i++ {
			elem2 := new(int16)
			*elem2 = iohelp.ReadInt16(r)
			bbp.A_int16 = append(bbp.A_int16, *elem2)
		}
	}
	{
		ln2 := iohelp.ReadUint32(r)
		for i := uint32(0); i < ln2; i++ {
			elem2 := new(uint16)
			*elem2 = iohelp.ReadUint16(r)
			bbp.A_uint16 = append(bbp.A_uint16, *elem2)
		}
	}
	{
		ln2 := iohelp.ReadUint32(r)
		for i := uint32(0); i < ln2; i++ {
			elem2 := new(int32)
			*elem2 = iohelp.ReadInt32(r)
			bbp.A_int32 = append(bbp.A_int32, *elem2)
		}
	}
	{
		ln2 := iohelp.ReadUint32(r)
		for i := uint32(0); i < ln2; i++ {
			elem2 := new(uint32)
			*elem2 = iohelp.ReadUint32(r)
			bbp.A_uint32 = append(bbp.A_uint32, *elem2)
		}
	}
	{
		ln2 := iohelp.ReadUint32(r)
		for i := uint32(0); i < ln2; i++ {
			elem2 := new(int64)
			*elem2 = iohelp.ReadInt64(r)
			bbp.A_int64 = append(bbp.A_int64, *elem2)
		}
	}
	{
		ln2 := iohelp.ReadUint32(r)
		for i := uint32(0); i < ln2; i++ {
			elem2 := new(uint64)
			*elem2 = iohelp.ReadUint64(r)
			bbp.A_uint64 = append(bbp.A_uint64, *elem2)
		}
	}
	{
		ln2 := iohelp.ReadUint32(r)
		for i := uint32(0); i < ln2; i++ {
			elem2 := new(float32)
			*elem2 = iohelp.ReadFloat32(r)
			bbp.A_float32 = append(bbp.A_float32, *elem2)
		}
	}
	{
		ln2 := iohelp.ReadUint32(r)
		for i := uint32(0); i < ln2; i++ {
			elem2 := new(float64)
			*elem2 = iohelp.ReadFloat64(r)
			bbp.A_float64 = append(bbp.A_float64, *elem2)
		}
	}
	{
		ln2 := iohelp.ReadUint32(r)
		for i := uint32(0); i < ln2; i++ {
			elem2 := new(string)
			*elem2 = iohelp.ReadString(r)
			bbp.A_string = append(bbp.A_string, *elem2)
		}
	}
	{
		ln2 := iohelp.ReadUint32(r)
		for i := uint32(0); i < ln2; i++ {
			elem2 := new([16]byte)
			*elem2 = iohelp.ReadGUID(r)
			bbp.A_guid = append(bbp.A_guid, *elem2)
		}
	}
	return r.Err
}

func (bbp *BasicArrays) bodyLen() uint32 {
	bodyLen := uint32(0)
	bodyLen += 4
	for range bbp.A_bool {
		bodyLen += 1
	}
	bodyLen += 4
	for range bbp.A_byte {
		bodyLen += 1
	}
	bodyLen += 4
	for range bbp.A_int16 {
		bodyLen += 2
	}
	bodyLen += 4
	for range bbp.A_uint16 {
		bodyLen += 2
	}
	bodyLen += 4
	for range bbp.A_int32 {
		bodyLen += 4
	}
	bodyLen += 4
	for range bbp.A_uint32 {
		bodyLen += 4
	}
	bodyLen += 4
	for range bbp.A_int64 {
		bodyLen += 8
	}
	bodyLen += 4
	for range bbp.A_uint64 {
		bodyLen += 8
	}
	bodyLen += 4
	for range bbp.A_float32 {
		bodyLen += 4
	}
	bodyLen += 4
	for range bbp.A_float64 {
		bodyLen += 8
	}
	bodyLen += 4
	for _, elem := range bbp.A_string {
		bodyLen += 4
		bodyLen += uint32(len(elem))
	}
	bodyLen += 4
	for range bbp.A_guid {
		bodyLen += 16
	}
	return bodyLen
}

var _ bebop.Record = &TestInt32Array{}

type TestInt32Array struct {
	A []int32
}

func (bbp TestInt32Array) EncodeBebop(iow io.Writer) (err error) {
	w := iohelp.NewErrorWriter(iow)
	iohelp.WriteUint32(w, uint32(len(bbp.A)))
	for _, elem := range bbp.A {
		iohelp.WriteInt32(w, elem)
	}
	return w.Err
}

func (bbp *TestInt32Array) DecodeBebop(ior io.Reader) (err error) {
	r := iohelp.NewErrorReader(ior)
	{
		ln2 := iohelp.ReadUint32(r)
		for i := uint32(0); i < ln2; i++ {
			elem2 := new(int32)
			*elem2 = iohelp.ReadInt32(r)
			bbp.A = append(bbp.A, *elem2)
		}
	}
	return r.Err
}

func (bbp *TestInt32Array) bodyLen() uint32 {
	bodyLen := uint32(0)
	bodyLen += 4
	for range bbp.A {
		bodyLen += 4
	}
	return bodyLen
}

