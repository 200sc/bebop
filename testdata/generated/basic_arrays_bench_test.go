package generated_test

import (
	"encoding/json"
	"testing"

	"github.com/200sc/bebop/testdata/generated"
	"github.com/200sc/bebop/testdata/generated/protos"
	"google.golang.org/protobuf/proto"
)

var benchArray = &generated.BasicArrays{
	A_bool: []bool{
		true, false, true, false,
	},
	A_byte: []byte{
		0, 1, 2, 3, 4, 5, 6, 7, 8,
	},
	A_int16: []int16{
		0, 1, 2, 3, 4, 5, 6, 7, 8,
	},
	A_uint16: []uint16{
		0, 1, 2, 3, 4, 5, 6, 7, 8,
	},
	A_int32: []int32{
		0, 1, 234436345, 3, 4, 5, 634, 7, 8,
	},
	A_uint32: []uint32{
		0, 1, 2, 33453566, 4, 5, 634634, 7, 8,
	},
	A_int64: []int64{
		3436453450, 346345346531, 3463453452, 3, 4, 5346345345, 34634566, 7, 8,
	},
	A_uint64: []uint64{
		0, 1, 2, 3, 34634563454, 5, 6334534634, 7, 8,
	},
	A_float32: []float32{
		0, 341, 2, 34563453, 4, 5, 6, 7, 8,
	},
	A_float64: []float64{
		0, 1, 2, 345343, 3453464, 3453453635, 353453456, 7, 8555555555,
	},
	A_string: []string{
		"0123151234123123", "11234125123415124", "223412512341512341254", "31245123151234125123413", "1231251231512315124", "124123151234151234125", "61231512341541234123", "12315123412512341257", "81231451241234151234151",
	},
}
var benchArrayBytes = []byte{4, 0, 0, 0, 1, 0, 1, 0, 9, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 1, 0, 2, 0,
	3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9, 0, 0, 0, 0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9, 0, 0, 0, 0,
	0, 0, 0, 1, 0, 0, 0, 249, 54, 249, 13, 3, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 122, 2, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9,
	0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 254, 117, 254, 1, 4, 0, 0, 0, 5, 0, 0, 0, 10, 175, 9, 0, 7, 0, 0, 0, 8,
	0, 0, 0, 9, 0, 0, 0, 74, 30, 212, 204, 0, 0, 0, 0, 227, 149, 202, 163, 80, 0, 0, 0, 12, 27, 112, 206, 0, 0, 0, 0, 3,
	0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 129, 193, 170, 62, 1, 0, 0, 0, 70, 123, 16, 2, 0, 0, 0, 0, 7, 0, 0, 0,
	0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0,
	0, 3, 0, 0, 0, 0, 0, 0, 0, 126, 127, 97, 16, 8, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 234, 83, 145, 121, 1, 0, 0, 0, 7, 0,
	0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 128, 170, 67, 0, 0, 0, 64, 95, 217, 3, 76, 0, 0,
	128, 64, 0, 0, 160, 64, 0, 0, 192, 64, 0, 0, 224, 64, 0, 0, 0, 65, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 240, 63, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 252, 19, 21, 65, 0, 0, 0, 0, 12, 89, 74, 65, 0, 0, 96, 168, 240, 186,
	233, 65, 0, 0, 0, 144, 69, 17, 181, 65, 0, 0, 0, 0, 0, 0, 28, 64, 0, 0, 48, 174, 54, 223, 255, 65, 9, 0, 0, 0, 16, 0,
	0, 0, 48, 49, 50, 51, 49, 53, 49, 50, 51, 52, 49, 50, 51, 49, 50, 51, 17, 0, 0, 0, 49, 49, 50, 51, 52, 49, 50, 53, 49,
	50, 51, 52, 49, 53, 49, 50, 52, 21, 0, 0, 0, 50, 50, 51, 52, 49, 50, 53, 49, 50, 51, 52, 49, 53, 49, 50, 51, 52, 49, 50,
	53, 52, 23, 0, 0, 0, 51, 49, 50, 52, 53, 49, 50, 51, 49, 53, 49, 50, 51, 52, 49, 50, 53, 49, 50, 51, 52, 49, 51, 19, 0,
	0, 0, 49, 50, 51, 49, 50, 53, 49, 50, 51, 49, 53, 49, 50, 51, 49, 53, 49, 50, 52, 21, 0, 0, 0, 49, 50, 52, 49, 50, 51,
	49, 53, 49, 50, 51, 52, 49, 53, 49, 50, 51, 52, 49, 50, 53, 20, 0, 0, 0, 54, 49, 50, 51, 49, 53, 49, 50, 51, 52, 49,
	53, 52, 49, 50, 51, 52, 49, 50, 51, 20, 0, 0, 0, 49, 50, 51, 49, 53, 49, 50, 51, 52, 49, 50, 53, 49, 50, 51, 52, 49,
	50, 53, 55, 23, 0, 0, 0, 56, 49, 50, 51, 49, 52, 53, 49, 50, 52, 49, 50, 51, 52, 49, 53, 49, 50, 51, 52, 49, 53, 49,
	0, 0, 0, 0}

var benchArrayJSON = []byte(`{"A_bool":[true,false,true,false],"A_byte":"AAECAwQFBgcI","A_int16":[0,1,2,3,4,5,6,7,8],"A_uint16":[0,1,2,3,4,5,6,7,8],"A_int32":[0,1,234436345,3,4,5,634,7,8],"A_uint32":[0,1,2,33453566,4,5,634634,7,8],"A_int64":[3436453450,346345346531,3463453452,3,4,5346345345,34634566,7,8],"A_uint64":[0,1,2,3,34634563454,5,6334534634,7,8],"A_float32":[0,341,2,34563452,4,5,6,7,8],"A_float64":[0,1,2,345343,3453464,3453453635,353453456,7,8555555555],"A_string":["0123151234123123","11234125123415124","223412512341512341254","31245123151234125123413","1231251231512315124","124123151234151234125","61231512341541234123","12315123412512341257","81231451241234151234151"],"A_guid":null}`)

var benchArray2 *generated.BasicArrays

func BenchmarkMarshalBasicArrays(b *testing.B) {
	for i := 0; i < b.N; i++ {
		out = benchArray.MarshalBebop()
	}
}

func BenchmarkUnmarshalBasicArrays(b *testing.B) {
	for i := 0; i < b.N; i++ {
		benchArray2 = &generated.BasicArrays{}
		benchArray2.MustUnmarshalBebop(benchArrayBytes)
	}
}

func BenchmarkUnmarshalSafeBasicArrays(b *testing.B) {
	for i := 0; i < b.N; i++ {
		benchArray2 = &generated.BasicArrays{}
		benchArray2.UnmarshalBebop(benchArrayBytes)
	}
}

func BenchmarkMarshalBasicArraysJSON(b *testing.B) {
	for i := 0; i < b.N; i++ {
		out, _ = json.Marshal(benchArray)
	}
}

func BenchmarkUnmarshalBasicArraysJSON(b *testing.B) {
	for i := 0; i < b.N; i++ {
		json.Unmarshal(benchArrayJSON, benchArray2)
	}
}

var basicArraysProto = &protos.BasicArrays{
	ABool: []bool{
		true, false, true, false,
	},
	AByte: []byte{
		0, 1, 2, 3, 4, 5, 6, 7, 8,
	},
	AInt16: []int32{
		0, 1, 2, 3, 4, 5, 6, 7, 8,
	},
	AUint16: []uint32{
		0, 1, 2, 3, 4, 5, 6, 7, 8,
	},
	AInt32: []int32{
		0, 1, 234436345, 3, 4, 5, 634, 7, 8,
	},
	AUint32: []uint32{
		0, 1, 2, 33453566, 4, 5, 634634, 7, 8,
	},
	AInt64: []int64{
		3436453450, 346345346531, 3463453452, 3, 4, 5346345345, 34634566, 7, 8,
	},
	AUint64: []uint64{
		0, 1, 2, 3, 34634563454, 5, 6334534634, 7, 8,
	},
	AFloat32: []float32{
		0, 341, 2, 34563453, 4, 5, 6, 7, 8,
	},
	AFloat64: []float64{
		0, 1, 2, 345343, 3453464, 3453453635, 353453456, 7, 8555555555,
	},
	AString: []string{
		"0123151234123123", "11234125123415124", "223412512341512341254", "31245123151234125123413", "1231251231512315124", "124123151234151234125", "61231512341541234123", "12315123412512341257", "81231451241234151234151",
	},
}

var out []byte

func BenchmarkMarshalBasicArraysProto(b *testing.B) {
	for i := 0; i < b.N; i++ {
		out, _ = proto.Marshal(basicArraysProto)
	}
}

var basicArraysProtoBytes = []byte{10, 4, 1, 0, 1, 0, 18, 9, 0, 1, 2, 3, 4, 5, 6, 7,
	8, 26, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 34, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 42, 13,
	0, 1, 249, 237, 228, 111, 3, 4, 5, 250, 4, 7, 8, 50, 14, 0, 1, 2, 254, 235, 249,
	15, 4, 5, 138, 222, 38, 7, 8, 58, 29, 202, 188, 208, 230, 12, 227, 171, 170, 158,
	138, 10, 140, 182, 192, 243, 12, 3, 4, 129, 131, 171, 245, 19, 198, 246, 193, 16,
	7, 8, 66, 18, 0, 1, 2, 3, 254, 254, 133, 131, 129, 1, 5, 234, 167, 197, 204, 23, 7,
	8, 74, 36, 0, 0, 0, 0, 0, 128, 170, 67, 0, 0, 0, 64, 95, 217, 3, 76, 0, 0, 128, 064,
	0, 0, 160, 64, 0, 0, 192, 64, 0, 0, 224, 64, 0, 0, 0, 65, 82, 72, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 240, 63, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 252, 19, 21, 65,
	0, 0, 0, 0, 12, 89, 74, 65, 0, 0, 96, 168, 240, 186, 233, 65, 0, 0, 0, 144, 69, 17,
	181, 65, 0, 0, 0, 0, 0, 0, 28, 64, 0, 0, 48, 174, 54, 223, 255, 65, 90, 16, 48, 49,
	50, 51, 49, 53, 49, 50, 51, 52, 49, 50, 51, 49, 50, 51, 90, 17, 49, 49, 50, 51, 52, 49,
	50, 53, 49, 50, 51, 52, 49, 53, 49, 50, 52, 90, 21, 50, 50, 51, 52, 49, 50, 53, 49, 50,
	51, 52, 49, 53, 49, 50, 51, 52, 49, 50, 53, 52, 90, 23, 51, 49, 50, 52, 53, 49, 50, 51,
	49, 53, 49, 50, 51, 52, 49, 50, 53, 49, 50, 51, 52, 49, 51, 90, 19, 49, 50, 51, 49, 50,
	53, 49, 50, 51, 49, 53, 49, 50, 51, 49, 53, 49, 50, 52, 90, 21, 49, 50, 52, 49, 50, 51,
	49, 53, 49, 50, 51, 52, 49, 53, 49, 50, 51, 52, 49, 50, 53, 90, 20, 54, 49, 50, 51, 49,
	53, 49, 50, 51, 52, 49, 53, 52, 49, 50, 51, 52, 49, 50, 51, 90, 20, 49, 50, 51, 49, 53,
	49, 50, 51, 52, 49, 50, 53, 49, 50, 51, 52, 49, 50, 53, 55, 90, 23, 56, 49, 50, 51, 49,
	52, 53, 49, 50, 52, 49, 50, 51, 52, 49, 53, 49, 50, 51, 52, 49, 53, 49}
var basicArraysProto2 = &protos.BasicArrays{}

func BenchmarkUnmarshalBasicArraysProto(b *testing.B) {
	for i := 0; i < b.N; i++ {
		proto.Unmarshal(basicArraysProtoBytes, basicArraysProto2)
	}
}
