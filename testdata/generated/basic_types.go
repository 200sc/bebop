// Code generated by bebopc-go; DO NOT EDIT.

package generated

import (
	"encoding/binary"
	"io"
	"time"

	"github.com/200sc/bebop"
	"github.com/200sc/bebop/iohelp"
)

var _ bebop.Record = &BasicTypes{}

type BasicTypes struct {
	A_bool bool
	A_byte byte
	A_int16 int16
	A_uint16 uint16
	A_int32 int32
	A_uint32 uint32
	A_int64 int64
	A_uint64 uint64
	A_float32 float32
	A_float64 float64
	A_string string
	A_guid [16]byte
	A_date time.Time
}

func (bbp BasicTypes) EncodeBebop(iow io.Writer) (err error) {
	w := iohelp.NewErrorWriter(iow)
	iohelp.WriteBool(w, bbp.A_bool)
	iohelp.WriteByte(w, bbp.A_byte)
	iohelp.WriteInt16(w, bbp.A_int16)
	iohelp.WriteUint16(w, bbp.A_uint16)
	iohelp.WriteInt32(w, bbp.A_int32)
	iohelp.WriteUint32(w, bbp.A_uint32)
	iohelp.WriteInt64(w, bbp.A_int64)
	iohelp.WriteUint64(w, bbp.A_uint64)
	iohelp.WriteFloat32(w, bbp.A_float32)
	iohelp.WriteFloat64(w, bbp.A_float64)
	iohelp.WriteUint32(w, uint32(len(bbp.A_string)))
	w.Write([]byte(bbp.A_string))
	iohelp.WriteGUID(w, bbp.A_guid)
	if bbp.A_date != (time.Time{}) {
		iohelp.WriteInt64(w, (bbp.A_date.UnixNano()/100))
	} else {
		iohelp.WriteInt64(w, 0)
	}
	return w.Err
}

func (bbp *BasicTypes) DecodeBebop(ior io.Reader) (err error) {
	r := iohelp.NewErrorReader(ior)
	binary.Read(r, binary.LittleEndian, &bbp.A_bool)
	binary.Read(r, binary.LittleEndian, &bbp.A_byte)
	binary.Read(r, binary.LittleEndian, &bbp.A_int16)
	binary.Read(r, binary.LittleEndian, &bbp.A_uint16)
	binary.Read(r, binary.LittleEndian, &bbp.A_int32)
	binary.Read(r, binary.LittleEndian, &bbp.A_uint32)
	binary.Read(r, binary.LittleEndian, &bbp.A_int64)
	binary.Read(r, binary.LittleEndian, &bbp.A_uint64)
	binary.Read(r, binary.LittleEndian, &bbp.A_float32)
	binary.Read(r, binary.LittleEndian, &bbp.A_float64)
	bbp.A_string = iohelp.ReadString(r)
	bbp.A_guid = iohelp.ReadGUID(r)
	bbp.A_date = iohelp.ReadTime(r)
	return r.Err
}

func (bbp *BasicTypes) bodyLen() uint32 {
	bodyLen := uint32(0)
	bodyLen += 1
	bodyLen += 1
	bodyLen += 2
	bodyLen += 2
	bodyLen += 4
	bodyLen += 4
	bodyLen += 8
	bodyLen += 8
	bodyLen += 4
	bodyLen += 8
	bodyLen += 4
	bodyLen += uint32(len(bbp.A_string))
	bodyLen += 16
	bodyLen += 8
	return bodyLen
}

