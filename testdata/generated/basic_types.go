// Code generated by bebopc-go; DO NOT EDIT.

package generated

import (
	"encoding/binary"
	"io"
	"time"

	"github.com/200sc/bebop"
)

var _ bebop.Record = &BasicTypes{}

type BasicTypes struct {
	A_bool bool
	A_byte byte
	A_int16 int16
	A_uint16 uint16
	A_int32 int32
	A_uint32 uint32
	A_int64 int64
	A_uint64 uint64
	A_float32 float32
	A_float64 float64
	A_string string
	A_guid [16]byte
	A_date time.Time
}

func(bbp BasicTypes) EncodeBebop(w io.Writer) (err error) {
	binary.Write(w, binary.LittleEndian, bbp.A_bool)
	binary.Write(w, binary.LittleEndian, bbp.A_byte)
	binary.Write(w, binary.LittleEndian, bbp.A_int16)
	binary.Write(w, binary.LittleEndian, bbp.A_uint16)
	binary.Write(w, binary.LittleEndian, bbp.A_int32)
	binary.Write(w, binary.LittleEndian, bbp.A_uint32)
	binary.Write(w, binary.LittleEndian, bbp.A_int64)
	binary.Write(w, binary.LittleEndian, bbp.A_uint64)
	binary.Write(w, binary.LittleEndian, bbp.A_float32)
	binary.Write(w, binary.LittleEndian, bbp.A_float64)
	binary.Write(w, binary.LittleEndian, uint32(len(bbp.A_string)))
	w.Write([]byte(bbp.A_string))
	w.Write(bbp.A_guid[:])
	if bbp.A_date != (time.Time{}) {
		binary.Write(w, binary.LittleEndian, (bbp.A_date.UnixNano()/100))
	} else {
		binary.Write(w, binary.LittleEndian, int64(0))
	}
	return nil
}

func(bbp *BasicTypes) DecodeBebop(r io.Reader) (err error) {
	binary.Read(r, binary.LittleEndian, &bbp.A_bool)
	binary.Read(r, binary.LittleEndian, &bbp.A_byte)
	binary.Read(r, binary.LittleEndian, &bbp.A_int16)
	binary.Read(r, binary.LittleEndian, &bbp.A_uint16)
	binary.Read(r, binary.LittleEndian, &bbp.A_int32)
	binary.Read(r, binary.LittleEndian, &bbp.A_uint32)
	binary.Read(r, binary.LittleEndian, &bbp.A_int64)
	binary.Read(r, binary.LittleEndian, &bbp.A_uint64)
	binary.Read(r, binary.LittleEndian, &bbp.A_float32)
	binary.Read(r, binary.LittleEndian, &bbp.A_float64)
	bbp.A_string = bebop.ReadString(r)
	bbp.A_guid = bebop.ReadGUID(r)
	bbp.A_date = bebop.ReadTime(r)
	return nil
}

func(bbp *BasicTypes) bodyLen() (uint32) {
	bodyLen := uint32(0)
	bodyLen += 1
	bodyLen += 1
	bodyLen += 2
	bodyLen += 2
	bodyLen += 4
	bodyLen += 4
	bodyLen += 8
	bodyLen += 8
	bodyLen += 4
	bodyLen += 8
	bodyLen += 4
	bodyLen += uint32(len(bbp.A_string))
	bodyLen += 16
	bodyLen += 8
	return bodyLen
}

