// Code generated by bebopc-go; DO NOT EDIT.

package generated

import (
	"bytes"
	"encoding/binary"
	"io"

	"github.com/200sc/bebop"
)

type DepE uint32

const (
	// Deprecated: X in DepE
	DepE_X DepE = 1
)

//  Documented enum 
type DocE uint32

const (
	//  Documented constant 
	DocE_X DocE = 1
	// Deprecated: Y in DocE
	DocE_Y DocE = 2
	//  Deprecated, documented constant 
	// Deprecated: Z in DocE
	DocE_Z DocE = 3
)

//  Documented struct 
var _ bebop.Record = &DocS{}

type DocS struct {
	//  Documented field 
	X int32
}

func(bbp DocS) EncodeBebop(w io.Writer) (err error) {
	binary.Write(w, binary.LittleEndian, bbp.X)
	return nil
}

func(bbp *DocS) DecodeBebop(r io.Reader) (err error) {
	binary.Read(r, binary.LittleEndian, &bbp.X)
	return nil
}

func(bbp *DocS) bodyLen() (uint32) {
	bodyLen := uint32(0)
	bodyLen += 4
	return bodyLen
}

var _ bebop.Record = &DepM{}

type DepM struct {
	// Deprecated: x in DepM
	X *int32
}

func(bbp DepM) EncodeBebop(w io.Writer) (err error) {
	binary.Write(w, binary.LittleEndian, bbp.bodyLen())
	if bbp.X != nil {
		w.Write([]byte{1})
		binary.Write(w, binary.LittleEndian, *bbp.X)
	}
	w.Write([]byte{0})
	return nil
}

func(bbp *DepM) DecodeBebop(ior io.Reader) (err error) {
	var bodyLen uint32
	var fieldNum byte
	binary.Read(ior, binary.LittleEndian, &bodyLen)
	body := make([]byte, bodyLen)
	ior.Read(body)
	r := bytes.NewReader(body)
	for r.Len() > 1 {
		fieldNum, _ = r.ReadByte()
		switch fieldNum {
		case 1:
			bbp.X = new(int32)
			binary.Read(r, binary.LittleEndian, bbp.X)
		default:
			return nil
		}
	}
	return nil
}

func(bbp *DepM) bodyLen() (uint32) {
	bodyLen := uint32(1)
	if bbp.X != nil {
		bodyLen += 1
		bodyLen += 4
	}
	return bodyLen
}

//  Documented message 
var _ bebop.Record = &DocM{}

type DocM struct {
	//  Documented field 
	X *int32
	// Deprecated: y in DocM
	Y *int32
	//  Deprecated, documented field 
	// Deprecated: z in DocM
	Z *int32
}

func(bbp DocM) EncodeBebop(w io.Writer) (err error) {
	binary.Write(w, binary.LittleEndian, bbp.bodyLen())
	if bbp.X != nil {
		w.Write([]byte{1})
		binary.Write(w, binary.LittleEndian, *bbp.X)
	}
	if bbp.Y != nil {
		w.Write([]byte{2})
		binary.Write(w, binary.LittleEndian, *bbp.Y)
	}
	if bbp.Z != nil {
		w.Write([]byte{3})
		binary.Write(w, binary.LittleEndian, *bbp.Z)
	}
	w.Write([]byte{0})
	return nil
}

func(bbp *DocM) DecodeBebop(ior io.Reader) (err error) {
	var bodyLen uint32
	var fieldNum byte
	binary.Read(ior, binary.LittleEndian, &bodyLen)
	body := make([]byte, bodyLen)
	ior.Read(body)
	r := bytes.NewReader(body)
	for r.Len() > 1 {
		fieldNum, _ = r.ReadByte()
		switch fieldNum {
		case 1:
			bbp.X = new(int32)
			binary.Read(r, binary.LittleEndian, bbp.X)
		case 2:
			bbp.Y = new(int32)
			binary.Read(r, binary.LittleEndian, bbp.Y)
		case 3:
			bbp.Z = new(int32)
			binary.Read(r, binary.LittleEndian, bbp.Z)
		default:
			return nil
		}
	}
	return nil
}

func(bbp *DocM) bodyLen() (uint32) {
	bodyLen := uint32(1)
	if bbp.X != nil {
		bodyLen += 1
		bodyLen += 4
	}
	if bbp.Y != nil {
		bodyLen += 1
		bodyLen += 4
	}
	if bbp.Z != nil {
		bodyLen += 1
		bodyLen += 4
	}
	return bodyLen
}

