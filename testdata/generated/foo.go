// Code generated by bebopc-go; DO NOT EDIT.

package generated

import (
	"bytes"
	"encoding/binary"
	"io"

	"github.com/200sc/bebop"
	"github.com/200sc/bebop/iohelp"
)

var _ bebop.Record = &Foo{}

type Foo struct {
	Bar Bar
}

func (bbp Foo) EncodeBebop(iow io.Writer) (err error) {
	w := iohelp.NewErrorWriter(iow)
	err = (bbp.Bar).EncodeBebop(w)
	if err != nil {
		return err
	}
	return w.Err
}

func (bbp *Foo) DecodeBebop(ior io.Reader) (err error) {
	r := iohelp.NewErrorReader(ior)
	{
		err = (&bbp.Bar).DecodeBebop(r)
		if err != nil {
			return err
		}
	}
	return r.Err
}

func (bbp *Foo) bodyLen() uint32 {
	bodyLen := uint32(0)
	bodyLen += (bbp.Bar).bodyLen()
	return bodyLen
}

var _ bebop.Record = &Bar{}

type Bar struct {
	X *float64
	Y *float64
	Z *float64
}

func (bbp Bar) EncodeBebop(iow io.Writer) (err error) {
	w := iohelp.NewErrorWriter(iow)
	binary.Write(w, binary.LittleEndian, bbp.bodyLen())
	if bbp.X != nil {
		w.Write([]byte{1})
		iohelp.WriteFloat64(w, *bbp.X)
	}
	if bbp.Y != nil {
		w.Write([]byte{2})
		iohelp.WriteFloat64(w, *bbp.Y)
	}
	if bbp.Z != nil {
		w.Write([]byte{3})
		iohelp.WriteFloat64(w, *bbp.Z)
	}
	w.Write([]byte{0})
	return w.Err
}

func (bbp *Bar) DecodeBebop(ior io.Reader) (err error) {
	er := iohelp.NewErrorReader(ior)
	bodyLen := iohelp.ReadUint32(er)
	body := make([]byte, bodyLen)
	er.Read(body)
	r := iohelp.NewErrorReader(bytes.NewReader(body))
	for {
		switch iohelp.ReadByte(r) {
		case 0:
			return er.Err
		case 1:
			bbp.X = new(float64)
			*bbp.X = iohelp.ReadFloat64(r)
		case 2:
			bbp.Y = new(float64)
			*bbp.Y = iohelp.ReadFloat64(r)
		case 3:
			bbp.Z = new(float64)
			*bbp.Z = iohelp.ReadFloat64(r)
		default:
			return er.Err
		}
	}
	return er.Err
}

func (bbp *Bar) bodyLen() uint32 {
	bodyLen := uint32(1)
	if bbp.X != nil {
		bodyLen += 1
		bodyLen += 8
	}
	if bbp.Y != nil {
		bodyLen += 1
		bodyLen += 8
	}
	if bbp.Z != nil {
		bodyLen += 1
		bodyLen += 8
	}
	return bodyLen
}

