// Code generated by bebopc-go; DO NOT EDIT.

package generated

import (
	"bytes"
	"encoding/binary"
	"io"

	"github.com/200sc/bebop"
	"github.com/200sc/bebop/iohelp"
)

var _ bebop.Record = &ReadOnlyMap{}

type ReadOnlyMap struct {
	vals *map[string]uint8
}

func (bbp ReadOnlyMap) EncodeBebop(iow io.Writer) (err error) {
	w := iohelp.ErrorWriter{Writer: iow}
	binary.Write(w, binary.LittleEndian, bbp.bodyLen())
	if bbp.vals != nil {
		w.Write([]byte{1})
		binary.Write(w, binary.LittleEndian, uint32(len(*bbp.vals)))
		for k, v := range *bbp.vals {
			binary.Write(w, binary.LittleEndian, uint32(len(k)))
			w.Write([]byte(k))
			binary.Write(w, binary.LittleEndian, v)
		}
	}
	w.Write([]byte{0})
	return w.Err
}

func (bbp *ReadOnlyMap) DecodeBebop(ior io.Reader) (err error) {
	var ln uint32
	var bodyLen uint32
	var fieldNum byte
	er := iohelp.ErrorReader{Reader: ior}
	binary.Read(er, binary.LittleEndian, &bodyLen)
	body := make([]byte, bodyLen)
	er.Read(body)
	r := bytes.NewReader(body)
	for r.Len() > 1 {
		fieldNum, _ = r.ReadByte()
		switch fieldNum {
		case 1:
			bbp.vals = new(map[string]uint8)
			ln = uint32(0)
			binary.Read(r, binary.LittleEndian, &ln)
			*bbp.vals = make(map[string]uint8)
			for i := uint32(0); i < ln; i++ {
				k := new(string)
				*k = iohelp.ReadString(r)
				elem3 := new(uint8)
				binary.Read(r, binary.LittleEndian, elem3)
				(*bbp.vals)[*k] = *elem3
			}
		default:
			return er.Err
		}
	}
	return er.Err
}

func (bbp *ReadOnlyMap) bodyLen() uint32 {
	bodyLen := uint32(1)
	if bbp.vals != nil {
		bodyLen += 1
		bodyLen += 4
		for k := range *bbp.vals {
			bodyLen += 4
			bodyLen += uint32(len(k))
			bodyLen += 1
		}
	}
	return bodyLen
}

func (bbp ReadOnlyMap) GetVals() *map[string]uint8 {
	return bbp.vals
}

