// Code generated by bebopc-go; DO NOT EDIT.

package generated

import (
	"bytes"
	"encoding/binary"
	"io"

	"github.com/200sc/bebop"
	"github.com/200sc/bebop/iohelp"
)

var _ bebop.Record = &ReadOnlyMap{}

type ReadOnlyMap struct {
	vals *map[string]uint8
}

func (bbp ReadOnlyMap) EncodeBebop(iow io.Writer) (err error) {
	w := iohelp.NewErrorWriter(iow)
	binary.Write(w, binary.LittleEndian, bbp.bodyLen())
	if bbp.vals != nil {
		w.Write([]byte{1})
		binary.Write(w, binary.LittleEndian, uint32(len(*bbp.vals)))
		for k2, v2 := range *bbp.vals {
			iohelp.WriteUint32(w, uint32(len(k2)))
			w.Write([]byte(k2))
			iohelp.WriteUint8(w, v2)
		}
	}
	w.Write([]byte{0})
	return w.Err
}

func (bbp *ReadOnlyMap) DecodeBebop(ior io.Reader) (err error) {
	er := iohelp.NewErrorReader(ior)
	bodyLen := iohelp.ReadUint32(er)
	body := make([]byte, bodyLen)
	er.Read(body)
	r := iohelp.NewErrorReader(bytes.NewReader(body))
	for {
		switch iohelp.ReadByte(r) {
		case 1:
			bbp.vals = new(map[string]uint8)
			ln3 := iohelp.ReadUint32(r)
			*bbp.vals = make(map[string]uint8)
			for i := uint32(0); i < ln3; i++ {
				k3 := iohelp.ReadString(r)
				(*bbp.vals)[k3] = iohelp.ReadUint8(r)
			}
		default:
			return er.Err
		}
	}
}

func (bbp *ReadOnlyMap) bodyLen() uint32 {
	bodyLen := uint32(1)
	if bbp.vals != nil {
		bodyLen += 1
		bodyLen += 4
		for k2 := range *bbp.vals {
			bodyLen += 4
			bodyLen += uint32(len(k2))
			bodyLen += 1
		}
	}
	return bodyLen
}

func makeReadOnlyMap(r iohelp.ErrorReader) (ReadOnlyMap, error) {
	v := ReadOnlyMap{}
	err := v.DecodeBebop(r)
	return v, err
}

func (bbp ReadOnlyMap) GetVals() *map[string]uint8 {
	return bbp.vals
}

