// Code generated by bebopc-go; DO NOT EDIT.

package generated

import (
	"io"

	"github.com/200sc/bebop"
	"github.com/200sc/bebop/iohelp"
)

var _ bebop.Record = &MsgpackComparison{}

// These field names are extremely weirdly capitalized, because I wanted the
// key names in JSON to be the same length while not coinciding with Bebop keywords.
type MsgpackComparison struct {
	INT0 uint8
	INT1 uint8
	INT1_ int16
	INT8 uint8
	INT8_ int16
	INT16 int16
	INT16_ int16
	INT32 int32
	INT32_ int32
	// int8 nIL; // "nil": null,
	TRUE bool
	FALSE bool
	FLOAT float64
	FLOAT_ float64
	STRING0 string
	STRING1 string
	STRING4 string
	STRING8 string
	STRING16 string
	ARRAY0 []int32
	ARRAY1 []string
	ARRAY8 []int32
}

func (bbp MsgpackComparison) EncodeBebop(iow io.Writer) (err error) {
	w := iohelp.NewErrorWriter(iow)
	iohelp.WriteUint8(w, bbp.INT0)
	iohelp.WriteUint8(w, bbp.INT1)
	iohelp.WriteInt16(w, bbp.INT1_)
	iohelp.WriteUint8(w, bbp.INT8)
	iohelp.WriteInt16(w, bbp.INT8_)
	iohelp.WriteInt16(w, bbp.INT16)
	iohelp.WriteInt16(w, bbp.INT16_)
	iohelp.WriteInt32(w, bbp.INT32)
	iohelp.WriteInt32(w, bbp.INT32_)
	iohelp.WriteBool(w, bbp.TRUE)
	iohelp.WriteBool(w, bbp.FALSE)
	iohelp.WriteFloat64(w, bbp.FLOAT)
	iohelp.WriteFloat64(w, bbp.FLOAT_)
	iohelp.WriteUint32(w, uint32(len(bbp.STRING0)))
	w.Write([]byte(bbp.STRING0))
	iohelp.WriteUint32(w, uint32(len(bbp.STRING1)))
	w.Write([]byte(bbp.STRING1))
	iohelp.WriteUint32(w, uint32(len(bbp.STRING4)))
	w.Write([]byte(bbp.STRING4))
	iohelp.WriteUint32(w, uint32(len(bbp.STRING8)))
	w.Write([]byte(bbp.STRING8))
	iohelp.WriteUint32(w, uint32(len(bbp.STRING16)))
	w.Write([]byte(bbp.STRING16))
	iohelp.WriteUint32(w, uint32(len(bbp.ARRAY0)))
	for _, elem := range bbp.ARRAY0 {
		iohelp.WriteInt32(w, elem)
	}
	iohelp.WriteUint32(w, uint32(len(bbp.ARRAY1)))
	for _, elem := range bbp.ARRAY1 {
		iohelp.WriteUint32(w, uint32(len(elem)))
		w.Write([]byte(elem))
	}
	iohelp.WriteUint32(w, uint32(len(bbp.ARRAY8)))
	for _, elem := range bbp.ARRAY8 {
		iohelp.WriteInt32(w, elem)
	}
	return w.Err
}

func (bbp *MsgpackComparison) DecodeBebop(ior io.Reader) (err error) {
	r := iohelp.NewErrorReader(ior)
	{
		bbp.INT0 = iohelp.ReadUint8(r)
	}
	{
		bbp.INT1 = iohelp.ReadUint8(r)
	}
	{
		bbp.INT1_ = iohelp.ReadInt16(r)
	}
	{
		bbp.INT8 = iohelp.ReadUint8(r)
	}
	{
		bbp.INT8_ = iohelp.ReadInt16(r)
	}
	{
		bbp.INT16 = iohelp.ReadInt16(r)
	}
	{
		bbp.INT16_ = iohelp.ReadInt16(r)
	}
	{
		bbp.INT32 = iohelp.ReadInt32(r)
	}
	{
		bbp.INT32_ = iohelp.ReadInt32(r)
	}
	{
		bbp.TRUE = iohelp.ReadBool(r)
	}
	{
		bbp.FALSE = iohelp.ReadBool(r)
	}
	{
		bbp.FLOAT = iohelp.ReadFloat64(r)
	}
	{
		bbp.FLOAT_ = iohelp.ReadFloat64(r)
	}
	{
		bbp.STRING0 = iohelp.ReadString(r)
	}
	{
		bbp.STRING1 = iohelp.ReadString(r)
	}
	{
		bbp.STRING4 = iohelp.ReadString(r)
	}
	{
		bbp.STRING8 = iohelp.ReadString(r)
	}
	{
		bbp.STRING16 = iohelp.ReadString(r)
	}
	{
		ln2 := iohelp.ReadUint32(r)
		for i := uint32(0); i < ln2; i++ {
			elem2 := new(int32)
			*elem2 = iohelp.ReadInt32(r)
			bbp.ARRAY0 = append(bbp.ARRAY0, *elem2)
		}
	}
	{
		ln2 := iohelp.ReadUint32(r)
		for i := uint32(0); i < ln2; i++ {
			elem2 := new(string)
			*elem2 = iohelp.ReadString(r)
			bbp.ARRAY1 = append(bbp.ARRAY1, *elem2)
		}
	}
	{
		ln2 := iohelp.ReadUint32(r)
		for i := uint32(0); i < ln2; i++ {
			elem2 := new(int32)
			*elem2 = iohelp.ReadInt32(r)
			bbp.ARRAY8 = append(bbp.ARRAY8, *elem2)
		}
	}
	return r.Err
}

func (bbp *MsgpackComparison) bodyLen() uint32 {
	bodyLen := uint32(0)
	bodyLen += 1
	bodyLen += 1
	bodyLen += 2
	bodyLen += 1
	bodyLen += 2
	bodyLen += 2
	bodyLen += 2
	bodyLen += 4
	bodyLen += 4
	bodyLen += 1
	bodyLen += 1
	bodyLen += 8
	bodyLen += 8
	bodyLen += 4
	bodyLen += uint32(len(bbp.STRING0))
	bodyLen += 4
	bodyLen += uint32(len(bbp.STRING1))
	bodyLen += 4
	bodyLen += uint32(len(bbp.STRING4))
	bodyLen += 4
	bodyLen += uint32(len(bbp.STRING8))
	bodyLen += 4
	bodyLen += uint32(len(bbp.STRING16))
	bodyLen += 4
	for range bbp.ARRAY0 {
		bodyLen += 4
	}
	bodyLen += 4
	for _, elem := range bbp.ARRAY1 {
		bodyLen += 4
		bodyLen += uint32(len(elem))
	}
	bodyLen += 4
	for range bbp.ARRAY8 {
		bodyLen += 4
	}
	return bodyLen
}

