// Code generated by bebopc-go; DO NOT EDIT.

package generated

import (
	"bytes"
	"encoding/binary"
	"io"

	"github.com/200sc/bebop"
	"github.com/200sc/bebop/iohelp"
)

type FurnitureFamily uint32

const (
	FurnitureFamily_Bed FurnitureFamily = 0
	FurnitureFamily_Table FurnitureFamily = 1
	FurnitureFamily_Shoe FurnitureFamily = 2
)

var _ bebop.Record = &Furniture{}

type Furniture struct {
	name string
	price uint32
	family FurnitureFamily
}

func(bbp Furniture) EncodeBebop(w io.Writer) (err error) {
	binary.Write(w, binary.LittleEndian, uint32(len(bbp.name)))
	w.Write([]byte(bbp.name))
	binary.Write(w, binary.LittleEndian, bbp.price)
	binary.Write(w, binary.LittleEndian, uint32(bbp.family))
	return nil
}

func(bbp *Furniture) DecodeBebop(r io.Reader) (err error) {
	bbp.name = iohelp.ReadString(r)
	binary.Read(r, binary.LittleEndian, &bbp.price)
	binary.Read(r, binary.LittleEndian, &bbp.family)
	return nil
}

func(bbp *Furniture) bodyLen() (uint32) {
	bodyLen := uint32(0)
	bodyLen += 4
	bodyLen += uint32(len(bbp.name))
	bodyLen += 4
	bodyLen += 4
	return bodyLen
}

func (bbp Furniture) GetName() string {
	return bbp.name
}

func (bbp Furniture) GetPrice() uint32 {
	return bbp.price
}

func (bbp Furniture) GetFamily() FurnitureFamily {
	return bbp.family
}

const RequestResponseOpCode = 0x31323334

var _ bebop.Record = &RequestResponse{}

type RequestResponse struct {
	availableFurniture []Furniture
}

func(bbp RequestResponse) EncodeBebop(w io.Writer) (err error) {
	binary.Write(w, binary.LittleEndian, uint32(RequestResponseOpCode))
	binary.Write(w, binary.LittleEndian, uint32(len(bbp.availableFurniture)))
	for _, elem := range bbp.availableFurniture {
		err = (elem).EncodeBebop(w)
		if err != nil {
			return err
		}
	}
	return nil
}

func(bbp *RequestResponse) DecodeBebop(r io.Reader) (err error) {
	var ln uint32
	r.Read(make([]byte, 4))
	ln = uint32(0)
	binary.Read(r, binary.LittleEndian, &ln)
	for i := uint32(0); i < ln; i++ {
		elem1 := new(Furniture)
		err = (elem1).DecodeBebop(r)
		if err != nil {
			return err
		}
		bbp.availableFurniture = append(bbp.availableFurniture, *elem1)
	}
	return nil
}

func(bbp *RequestResponse) bodyLen() (uint32) {
	bodyLen := uint32(0)
	bodyLen += 4
	for _, elem := range bbp.availableFurniture {
		bodyLen += (elem).bodyLen()
	}
	return bodyLen
}

func (bbp RequestResponse) GetAvailableFurniture() []Furniture {
	return bbp.availableFurniture
}

const RequestCatalogOpCode = 0x494b4541

var _ bebop.Record = &RequestCatalog{}

type RequestCatalog struct {
	Family *FurnitureFamily
	// Deprecated: Nobody react to what I'm about to say...
	SecretTunnel *string
}

func(bbp RequestCatalog) EncodeBebop(w io.Writer) (err error) {
	binary.Write(w, binary.LittleEndian, bbp.bodyLen())
	if bbp.Family != nil {
		w.Write([]byte{1})
		binary.Write(w, binary.LittleEndian, uint32(*bbp.Family))
	}
	if bbp.SecretTunnel != nil {
		w.Write([]byte{2})
		binary.Write(w, binary.LittleEndian, uint32(len(*bbp.SecretTunnel)))
		w.Write([]byte(*bbp.SecretTunnel))
	}
	w.Write([]byte{0})
	return nil
}

func(bbp *RequestCatalog) DecodeBebop(ior io.Reader) (err error) {
	var bodyLen uint32
	var fieldNum byte
	binary.Read(ior, binary.LittleEndian, &bodyLen)
	body := make([]byte, bodyLen)
	ior.Read(body)
	r := bytes.NewReader(body)
	for r.Len() > 1 {
		fieldNum, _ = r.ReadByte()
		switch fieldNum {
		case 1:
			bbp.Family = new(FurnitureFamily)
			binary.Read(r, binary.LittleEndian, bbp.Family)
		case 2:
			bbp.SecretTunnel = new(string)
			*bbp.SecretTunnel = iohelp.ReadString(r)
		default:
			return nil
		}
	}
	return nil
}

func(bbp *RequestCatalog) bodyLen() (uint32) {
	bodyLen := uint32(1)
	if bbp.Family != nil {
		bodyLen += 1
		bodyLen += 4
	}
	if bbp.SecretTunnel != nil {
		bodyLen += 1
		bodyLen += 4
		bodyLen += uint32(len(*bbp.SecretTunnel))
	}
	return bodyLen
}

