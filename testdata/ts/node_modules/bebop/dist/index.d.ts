export declare class BebopRuntimeError extends Error {
    constructor(message: any);
}
export declare class BebopView {
    private static textDecoder;
    private static writeBuffer;
    private static writeBufferView;
    private static instance;
    static getInstance(): BebopView;
    minimumTextDecoderLength: number;
    private buffer;
    private view;
    index: number;
    length: number;
    private constructor();
    startReading(buffer: Uint8Array): void;
    startWriting(): void;
    private guaranteeBufferLength;
    private growBy;
    skip(amount: number): void;
    toArray(): Uint8Array;
    readByte(): number;
    readUint16(): number;
    readInt16(): number;
    readUint32(): number;
    readInt32(): number;
    readUint64(): bigint;
    readInt64(): bigint;
    readFloat32(): number;
    readFloat64(): number;
    writeByte(value: number): void;
    writeUint16(value: number): void;
    writeInt16(value: number): void;
    writeUint32(value: number): void;
    writeInt32(value: number): void;
    writeUint64(value: bigint): void;
    writeInt64(value: bigint): void;
    writeFloat32(value: number): void;
    writeFloat64(value: number): void;
    readBytes(): Uint8Array;
    writeBytes(value: Uint8Array): void;
    /**
     * Reads a length-prefixed UTF-8-encoded string.
     */
    readString(): string;
    /**
     * Writes a length-prefixed UTF-8-encoded string.
     */
    writeString(value: string): void;
    readGuid(): string;
    writeGuid(value: string): void;
    readDate(): Date;
    writeDate(date: Date): void;
    writeEnum(value: any): void;
    /**
     * Reserve some space to write a message's length prefix, and return its index.
     * The length is stored as a little-endian fixed-width unsigned 32-bit integer, so 4 bytes are reserved.
     */
    reserveMessageLength(): number;
    /**
     * Fill in a message's length prefix.
     */
    fillMessageLength(position: number, messageLength: number): void;
    /**
     * Read out a message's length prefix.
     */
    readMessageLength(): number;
}
