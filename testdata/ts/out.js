"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
exports.__esModule = true;
exports.VideoData = exports.VideoCodec = exports.Float64s = exports.Uint64s = exports.Int64s = exports.Float32s = exports.Uint32s = exports.Int32s = exports.Library = exports.Song = exports.Musician = exports.Instrument = exports.Test22 = exports.Hello = exports.Bar = exports.Foo = exports.MyEnum = exports.Test2 = exports.Test = exports.DocS = exports.DocM = exports.DocE = exports.DepM = exports.DepE = exports.MyObj = exports.BlockComments3 = exports.BlockComments2 = exports.BlockComments = exports.TestFlags = exports.BasicTypes = exports.TestInt32Array = exports.BasicArrays = exports.ArrayOfStrings = exports.ArraySamples = exports.guidconst = exports.stringconst = exports.boolconst = exports.float64nanconst = exports.float64ninfconst = exports.float64infconst = exports.float64const = exports.float32const = exports.int64const = exports.int32const = exports.int16const = exports.int8const = exports.uint64const = exports.uint32const = exports.uint16const = exports.uint8const = void 0;
exports.List2 = exports.Nil2 = exports.Cons2 = exports.WithUnionField = exports.U2 = exports.U6 = exports.U5 = exports.U4 = exports.U3 = exports.List = exports.Null = exports.Cons = exports.U = exports.C = exports.B = exports.A = exports.TaggedUnion = exports.TaggedSubStruct = exports.TaggedMessage = exports.TaggedStruct = exports.AddResponse = exports.Add = exports.AddRequest = exports.Print = exports.PrintRequest = exports.RequestResponse = exports.RequestCatalog = exports.Furniture = exports.FurnitureFamily = exports.NumericalASCIIOpCode4 = exports.NumericalASCIIOpCode3 = exports.NumericalASCIIOpCode2 = exports.NumericalASCIIOpCode = exports.MsgpackComparison = exports.ReadOnlyMap = exports.ExampleMessage = exports.SomeMaps = exports.S = exports.M = exports.SkipTestNewContainer = exports.SkipTestOldContainer = exports.SkipTestNew = exports.SkipTestOld = exports.MediaMessage = void 0;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//
//       bebopc version:
//           2.4.9
//
//
//       bebopc source:
//           https://github.com/RainwayApp/bebop
//
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
var bebop_1 = require("bebop");
exports.uint8const = 1;
exports.uint16const = 1;
exports.uint32const = 1;
exports.uint64const = BigInt("1");
exports.int8const = 1;
exports.int16const = 1;
exports.int32const = 1;
exports.int64const = BigInt("1");
exports.float32const = 1;
exports.float64const = 1.5;
exports.float64infconst = Number.POSITIVE_INFINITY;
exports.float64ninfconst = Number.NEGATIVE_INFINITY;
exports.float64nanconst = Number.NaN;
exports.boolconst = true;
exports.stringconst = "1";
exports.guidconst = "e2722bf7-022a-496a-9f01-7029d7d5563d";
exports.ArraySamples = {
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        {
            var length0 = message.bytes.length;
            view.writeUint32(length0);
            for (var i0 = 0; i0 < length0; i0++) {
                {
                    var length1 = message.bytes[i0].length;
                    view.writeUint32(length1);
                    for (var i1 = 0; i1 < length1; i1++) {
                        view.writeBytes(message.bytes[i0][i1]);
                    }
                }
            }
        }
        {
            var length0 = message.bytes2.length;
            view.writeUint32(length0);
            for (var i0 = 0; i0 < length0; i0++) {
                {
                    var length1 = message.bytes2[i0].length;
                    view.writeUint32(length1);
                    for (var i1 = 0; i1 < length1; i1++) {
                        view.writeBytes(message.bytes2[i0][i1]);
                    }
                }
            }
        }
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var field0;
        {
            var length0 = view.readUint32();
            field0 = new Array(length0);
            for (var i0 = 0; i0 < length0; i0++) {
                var x0 = void 0;
                {
                    var length1 = view.readUint32();
                    x0 = new Array(length1);
                    for (var i1 = 0; i1 < length1; i1++) {
                        var x1 = void 0;
                        x1 = view.readBytes();
                        x0[i1] = x1;
                    }
                }
                field0[i0] = x0;
            }
        }
        var field1;
        {
            var length0 = view.readUint32();
            field1 = new Array(length0);
            for (var i0 = 0; i0 < length0; i0++) {
                var x0 = void 0;
                {
                    var length1 = view.readUint32();
                    x0 = new Array(length1);
                    for (var i1 = 0; i1 < length1; i1++) {
                        var x1 = void 0;
                        x1 = view.readBytes();
                        x0[i1] = x1;
                    }
                }
                field1[i0] = x0;
            }
        }
        var message = {
            bytes: field0,
            bytes2: field1
        };
        return message;
    }
};
exports.ArrayOfStrings = {
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        {
            var length0 = message.strings.length;
            view.writeUint32(length0);
            for (var i0 = 0; i0 < length0; i0++) {
                view.writeString(message.strings[i0]);
            }
        }
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var field0;
        {
            var length0 = view.readUint32();
            field0 = new Array(length0);
            for (var i0 = 0; i0 < length0; i0++) {
                var x0 = void 0;
                x0 = view.readString();
                field0[i0] = x0;
            }
        }
        var message = {
            strings: field0
        };
        return message;
    }
};
exports.BasicArrays = {
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        {
            var length0 = message.a_bool.length;
            view.writeUint32(length0);
            for (var i0 = 0; i0 < length0; i0++) {
                view.writeByte(Number(message.a_bool[i0]));
            }
        }
        view.writeBytes(message.a_byte);
        {
            var length0 = message.a_int16.length;
            view.writeUint32(length0);
            for (var i0 = 0; i0 < length0; i0++) {
                view.writeInt16(message.a_int16[i0]);
            }
        }
        {
            var length0 = message.a_uint16.length;
            view.writeUint32(length0);
            for (var i0 = 0; i0 < length0; i0++) {
                view.writeUint16(message.a_uint16[i0]);
            }
        }
        {
            var length0 = message.a_int32.length;
            view.writeUint32(length0);
            for (var i0 = 0; i0 < length0; i0++) {
                view.writeInt32(message.a_int32[i0]);
            }
        }
        {
            var length0 = message.a_uint32.length;
            view.writeUint32(length0);
            for (var i0 = 0; i0 < length0; i0++) {
                view.writeUint32(message.a_uint32[i0]);
            }
        }
        {
            var length0 = message.a_int64.length;
            view.writeUint32(length0);
            for (var i0 = 0; i0 < length0; i0++) {
                view.writeInt64(message.a_int64[i0]);
            }
        }
        {
            var length0 = message.a_uint64.length;
            view.writeUint32(length0);
            for (var i0 = 0; i0 < length0; i0++) {
                view.writeUint64(message.a_uint64[i0]);
            }
        }
        {
            var length0 = message.a_float32.length;
            view.writeUint32(length0);
            for (var i0 = 0; i0 < length0; i0++) {
                view.writeFloat32(message.a_float32[i0]);
            }
        }
        {
            var length0 = message.a_float64.length;
            view.writeUint32(length0);
            for (var i0 = 0; i0 < length0; i0++) {
                view.writeFloat64(message.a_float64[i0]);
            }
        }
        {
            var length0 = message.a_string.length;
            view.writeUint32(length0);
            for (var i0 = 0; i0 < length0; i0++) {
                view.writeString(message.a_string[i0]);
            }
        }
        {
            var length0 = message.a_guid.length;
            view.writeUint32(length0);
            for (var i0 = 0; i0 < length0; i0++) {
                view.writeGuid(message.a_guid[i0]);
            }
        }
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var field0;
        {
            var length0 = view.readUint32();
            field0 = new Array(length0);
            for (var i0 = 0; i0 < length0; i0++) {
                var x0 = void 0;
                x0 = !!view.readByte();
                field0[i0] = x0;
            }
        }
        var field1;
        field1 = view.readBytes();
        var field2;
        {
            var length0 = view.readUint32();
            field2 = new Array(length0);
            for (var i0 = 0; i0 < length0; i0++) {
                var x0 = void 0;
                x0 = view.readInt16();
                field2[i0] = x0;
            }
        }
        var field3;
        {
            var length0 = view.readUint32();
            field3 = new Array(length0);
            for (var i0 = 0; i0 < length0; i0++) {
                var x0 = void 0;
                x0 = view.readUint16();
                field3[i0] = x0;
            }
        }
        var field4;
        {
            var length0 = view.readUint32();
            field4 = new Array(length0);
            for (var i0 = 0; i0 < length0; i0++) {
                var x0 = void 0;
                x0 = view.readInt32();
                field4[i0] = x0;
            }
        }
        var field5;
        {
            var length0 = view.readUint32();
            field5 = new Array(length0);
            for (var i0 = 0; i0 < length0; i0++) {
                var x0 = void 0;
                x0 = view.readUint32();
                field5[i0] = x0;
            }
        }
        var field6;
        {
            var length0 = view.readUint32();
            field6 = new Array(length0);
            for (var i0 = 0; i0 < length0; i0++) {
                var x0 = void 0;
                x0 = view.readInt64();
                field6[i0] = x0;
            }
        }
        var field7;
        {
            var length0 = view.readUint32();
            field7 = new Array(length0);
            for (var i0 = 0; i0 < length0; i0++) {
                var x0 = void 0;
                x0 = view.readUint64();
                field7[i0] = x0;
            }
        }
        var field8;
        {
            var length0 = view.readUint32();
            field8 = new Array(length0);
            for (var i0 = 0; i0 < length0; i0++) {
                var x0 = void 0;
                x0 = view.readFloat32();
                field8[i0] = x0;
            }
        }
        var field9;
        {
            var length0 = view.readUint32();
            field9 = new Array(length0);
            for (var i0 = 0; i0 < length0; i0++) {
                var x0 = void 0;
                x0 = view.readFloat64();
                field9[i0] = x0;
            }
        }
        var field10;
        {
            var length0 = view.readUint32();
            field10 = new Array(length0);
            for (var i0 = 0; i0 < length0; i0++) {
                var x0 = void 0;
                x0 = view.readString();
                field10[i0] = x0;
            }
        }
        var field11;
        {
            var length0 = view.readUint32();
            field11 = new Array(length0);
            for (var i0 = 0; i0 < length0; i0++) {
                var x0 = void 0;
                x0 = view.readGuid();
                field11[i0] = x0;
            }
        }
        var message = {
            a_bool: field0,
            a_byte: field1,
            a_int16: field2,
            a_uint16: field3,
            a_int32: field4,
            a_uint32: field5,
            a_int64: field6,
            a_uint64: field7,
            a_float32: field8,
            a_float64: field9,
            a_string: field10,
            a_guid: field11
        };
        return message;
    }
};
exports.TestInt32Array = {
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        {
            var length0 = message.a.length;
            view.writeUint32(length0);
            for (var i0 = 0; i0 < length0; i0++) {
                view.writeInt32(message.a[i0]);
            }
        }
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var field0;
        {
            var length0 = view.readUint32();
            field0 = new Array(length0);
            for (var i0 = 0; i0 < length0; i0++) {
                var x0 = void 0;
                x0 = view.readInt32();
                field0[i0] = x0;
            }
        }
        var message = {
            a: field0
        };
        return message;
    }
};
exports.BasicTypes = {
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        view.writeByte(Number(message.a_bool));
        view.writeByte(message.a_byte);
        view.writeInt16(message.a_int16);
        view.writeUint16(message.a_uint16);
        view.writeInt32(message.a_int32);
        view.writeUint32(message.a_uint32);
        view.writeInt64(message.a_int64);
        view.writeUint64(message.a_uint64);
        view.writeFloat32(message.a_float32);
        view.writeFloat64(message.a_float64);
        view.writeString(message.a_string);
        view.writeGuid(message.a_guid);
        view.writeDate(message.a_date);
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var field0;
        field0 = !!view.readByte();
        var field1;
        field1 = view.readByte();
        var field2;
        field2 = view.readInt16();
        var field3;
        field3 = view.readUint16();
        var field4;
        field4 = view.readInt32();
        var field5;
        field5 = view.readUint32();
        var field6;
        field6 = view.readInt64();
        var field7;
        field7 = view.readUint64();
        var field8;
        field8 = view.readFloat32();
        var field9;
        field9 = view.readFloat64();
        var field10;
        field10 = view.readString();
        var field11;
        field11 = view.readGuid();
        var field12;
        field12 = view.readDate();
        var message = {
            a_bool: field0,
            a_byte: field1,
            a_int16: field2,
            a_uint16: field3,
            a_int32: field4,
            a_uint32: field5,
            a_int64: field6,
            a_uint64: field7,
            a_float32: field8,
            a_float64: field9,
            a_string: field10,
            a_guid: field11,
            a_date: field12
        };
        return message;
    }
};
var TestFlags;
(function (TestFlags) {
    TestFlags[TestFlags["None"] = 0] = "None";
    TestFlags[TestFlags["Read"] = 1] = "Read";
    TestFlags[TestFlags["Write"] = 2] = "Write";
    TestFlags[TestFlags["ReadWrite"] = 3] = "ReadWrite";
    TestFlags[TestFlags["Complex"] = 19] = "Complex";
})(TestFlags = exports.TestFlags || (exports.TestFlags = {}));
/**
 * block
 */
var BlockComments;
(function (BlockComments) {
    /**
     * block
     */
    BlockComments[BlockComments["Block"] = 1] = "Block";
})(BlockComments = exports.BlockComments || (exports.BlockComments = {}));
exports.BlockComments2 = {
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        view.writeInt16(message.f);
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var field0;
        field0 = view.readInt16();
        var message = {
            f: field0
        };
        return message;
    }
};
exports.BlockComments3 = {
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        var pos = view.reserveMessageLength();
        var start = view.length;
        view.writeByte(0);
        var end = view.length;
        view.fillMessageLength(pos, end - start);
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var message = {};
        var length = view.readMessageLength();
        var end = view.index + length;
        while (true) {
            switch (view.readByte()) {
                case 0:
                    return message;
                default:
                    view.index = end;
                    return message;
            }
        }
    }
};
exports.MyObj = {
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        var pos = view.reserveMessageLength();
        var start = view.length;
        if (message.start != null) {
            view.writeByte(1);
            view.writeDate(message.start);
        }
        if (message.end != null) {
            view.writeByte(2);
            view.writeDate(message.end);
        }
        view.writeByte(0);
        var end = view.length;
        view.fillMessageLength(pos, end - start);
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var message = {};
        var length = view.readMessageLength();
        var end = view.index + length;
        while (true) {
            switch (view.readByte()) {
                case 0:
                    return message;
                case 1:
                    message.start = view.readDate();
                    break;
                case 2:
                    message.end = view.readDate();
                    break;
                default:
                    view.index = end;
                    return message;
            }
        }
    }
};
var DepE;
(function (DepE) {
    /**
     * @deprecated X in DepE
     */
    DepE[DepE["X"] = 1] = "X";
})(DepE = exports.DepE || (exports.DepE = {}));
exports.DepM = {
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        var pos = view.reserveMessageLength();
        var start = view.length;
        view.writeByte(0);
        var end = view.length;
        view.fillMessageLength(pos, end - start);
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var message = {};
        var length = view.readMessageLength();
        var end = view.index + length;
        while (true) {
            switch (view.readByte()) {
                case 0:
                    return message;
                case 1:
                    message.x = view.readInt32();
                    break;
                default:
                    view.index = end;
                    return message;
            }
        }
    }
};
/**
 * Documented enum
 */
var DocE;
(function (DocE) {
    /**
     * Documented constant
     */
    DocE[DocE["X"] = 1] = "X";
    /**
     * @deprecated Y in DocE
     */
    DocE[DocE["Y"] = 2] = "Y";
    /**
     * Deprecated, documented constant
     * @deprecated Z in DocE
     */
    DocE[DocE["Z"] = 3] = "Z";
})(DocE = exports.DocE || (exports.DocE = {}));
exports.DocM = {
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        var pos = view.reserveMessageLength();
        var start = view.length;
        if (message.x != null) {
            view.writeByte(1);
            view.writeInt32(message.x);
        }
        view.writeByte(0);
        var end = view.length;
        view.fillMessageLength(pos, end - start);
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var message = {};
        var length = view.readMessageLength();
        var end = view.index + length;
        while (true) {
            switch (view.readByte()) {
                case 0:
                    return message;
                case 1:
                    message.x = view.readInt32();
                    break;
                case 2:
                    message.y = view.readInt32();
                    break;
                case 3:
                    message.z = view.readInt32();
                    break;
                default:
                    view.index = end;
                    return message;
            }
        }
    }
};
exports.DocS = {
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        view.writeInt32(message.x);
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var field0;
        field0 = view.readInt32();
        var message = {
            x: field0
        };
        return message;
    }
};
var Test;
(function (Test) {
    Test[Test["Start"] = 1] = "Start";
    Test[Test["End"] = 2] = "End";
    Test[Test["Middle"] = 3] = "Middle";
    /**
     * @deprecated who knows
     */
    Test[Test["Beginning"] = 4] = "Beginning";
})(Test = exports.Test || (exports.Test = {}));
var Test2;
(function (Test2) {
    Test2[Test2["Start"] = 1] = "Start";
    Test2[Test2["End"] = 2] = "End";
    Test2[Test2["Middle"] = 3] = "Middle";
    /**
     * @deprecated who knows
     */
    Test2[Test2["Beginning"] = 4] = "Beginning";
})(Test2 = exports.Test2 || (exports.Test2 = {}));
var MyEnum;
(function (MyEnum) {
    MyEnum[MyEnum["One"] = 1] = "One";
})(MyEnum = exports.MyEnum || (exports.MyEnum = {}));
exports.Foo = {
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        exports.Bar.encodeInto(message.bar, view);
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var field0;
        field0 = exports.Bar.readFrom(view);
        var message = {
            bar: field0
        };
        return message;
    }
};
exports.Bar = {
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        var pos = view.reserveMessageLength();
        var start = view.length;
        if (message.x != null) {
            view.writeByte(1);
            view.writeFloat64(message.x);
        }
        if (message.y != null) {
            view.writeByte(2);
            view.writeFloat64(message.y);
        }
        if (message.z != null) {
            view.writeByte(3);
            view.writeFloat64(message.z);
        }
        view.writeByte(0);
        var end = view.length;
        view.fillMessageLength(pos, end - start);
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var message = {};
        var length = view.readMessageLength();
        var end = view.index + length;
        while (true) {
            switch (view.readByte()) {
                case 0:
                    return message;
                case 1:
                    message.x = view.readFloat64();
                    break;
                case 2:
                    message.y = view.readFloat64();
                    break;
                case 3:
                    message.z = view.readFloat64();
                    break;
                default:
                    view.index = end;
                    return message;
            }
        }
    }
};
exports.Hello = {
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        view.writeInt32(message.yes);
        view.writeString(message.No);
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var field0;
        field0 = view.readInt32();
        var field1;
        field1 = view.readString();
        var message = {
            yes: field0,
            No: field1
        };
        return message;
    }
};
exports.Test22 = {
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        view.writeUint32(message.noisemaker);
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var field0;
        field0 = view.readUint32();
        var message = {
            noisemaker: field0
        };
        return message;
    }
};
var Instrument;
(function (Instrument) {
    Instrument[Instrument["Sax"] = 0] = "Sax";
    Instrument[Instrument["Trumpet"] = 1] = "Trumpet";
    Instrument[Instrument["Clarinet"] = 2] = "Clarinet";
})(Instrument = exports.Instrument || (exports.Instrument = {}));
exports.Musician = {
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        view.writeString(message.name);
        view.writeUint32(message.plays);
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var field0;
        field0 = view.readString();
        var field1;
        field1 = view.readUint32();
        var message = {
            name: field0,
            plays: field1
        };
        return message;
    }
};
exports.Song = {
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        var pos = view.reserveMessageLength();
        var start = view.length;
        if (message.title != null) {
            view.writeByte(1);
            view.writeString(message.title);
        }
        if (message.year != null) {
            view.writeByte(2);
            view.writeUint16(message.year);
        }
        if (message.performers != null) {
            view.writeByte(3);
            {
                var length0 = message.performers.length;
                view.writeUint32(length0);
                for (var i0 = 0; i0 < length0; i0++) {
                    exports.Musician.encodeInto(message.performers[i0], view);
                }
            }
        }
        view.writeByte(0);
        var end = view.length;
        view.fillMessageLength(pos, end - start);
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var message = {};
        var length = view.readMessageLength();
        var end = view.index + length;
        while (true) {
            switch (view.readByte()) {
                case 0:
                    return message;
                case 1:
                    message.title = view.readString();
                    break;
                case 2:
                    message.year = view.readUint16();
                    break;
                case 3:
                    {
                        var length0 = view.readUint32();
                        message.performers = new Array(length0);
                        for (var i0 = 0; i0 < length0; i0++) {
                            var x0 = void 0;
                            x0 = exports.Musician.readFrom(view);
                            message.performers[i0] = x0;
                        }
                    }
                    break;
                default:
                    view.index = end;
                    return message;
            }
        }
    }
};
exports.Library = {
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var e_1, _a;
        var before = view.length;
        view.writeUint32(message.songs.size);
        try {
            for (var _b = __values(message.songs), _c = _b.next(); !_c.done; _c = _b.next()) {
                var _d = __read(_c.value, 2), k0 = _d[0], v0 = _d[1];
                view.writeGuid(k0);
                exports.Song.encodeInto(v0, view);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var field0;
        {
            var length0 = view.readUint32();
            field0 = new Map();
            for (var i0 = 0; i0 < length0; i0++) {
                var k0 = void 0;
                var v0 = void 0;
                k0 = view.readGuid();
                v0 = exports.Song.readFrom(view);
                field0.set(k0, v0);
            }
        }
        var message = {
            songs: field0
        };
        return message;
    }
};
exports.Int32s = {
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        {
            var length0 = message.a.length;
            view.writeUint32(length0);
            for (var i0 = 0; i0 < length0; i0++) {
                view.writeInt32(message.a[i0]);
            }
        }
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var field0;
        {
            var length0 = view.readUint32();
            field0 = new Array(length0);
            for (var i0 = 0; i0 < length0; i0++) {
                var x0 = void 0;
                x0 = view.readInt32();
                field0[i0] = x0;
            }
        }
        var message = {
            a: field0
        };
        return message;
    }
};
exports.Uint32s = {
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        {
            var length0 = message.a.length;
            view.writeUint32(length0);
            for (var i0 = 0; i0 < length0; i0++) {
                view.writeUint32(message.a[i0]);
            }
        }
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var field0;
        {
            var length0 = view.readUint32();
            field0 = new Array(length0);
            for (var i0 = 0; i0 < length0; i0++) {
                var x0 = void 0;
                x0 = view.readUint32();
                field0[i0] = x0;
            }
        }
        var message = {
            a: field0
        };
        return message;
    }
};
exports.Float32s = {
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        {
            var length0 = message.a.length;
            view.writeUint32(length0);
            for (var i0 = 0; i0 < length0; i0++) {
                view.writeFloat32(message.a[i0]);
            }
        }
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var field0;
        {
            var length0 = view.readUint32();
            field0 = new Array(length0);
            for (var i0 = 0; i0 < length0; i0++) {
                var x0 = void 0;
                x0 = view.readFloat32();
                field0[i0] = x0;
            }
        }
        var message = {
            a: field0
        };
        return message;
    }
};
exports.Int64s = {
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        {
            var length0 = message.a.length;
            view.writeUint32(length0);
            for (var i0 = 0; i0 < length0; i0++) {
                view.writeInt64(message.a[i0]);
            }
        }
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var field0;
        {
            var length0 = view.readUint32();
            field0 = new Array(length0);
            for (var i0 = 0; i0 < length0; i0++) {
                var x0 = void 0;
                x0 = view.readInt64();
                field0[i0] = x0;
            }
        }
        var message = {
            a: field0
        };
        return message;
    }
};
exports.Uint64s = {
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        {
            var length0 = message.a.length;
            view.writeUint32(length0);
            for (var i0 = 0; i0 < length0; i0++) {
                view.writeUint64(message.a[i0]);
            }
        }
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var field0;
        {
            var length0 = view.readUint32();
            field0 = new Array(length0);
            for (var i0 = 0; i0 < length0; i0++) {
                var x0 = void 0;
                x0 = view.readUint64();
                field0[i0] = x0;
            }
        }
        var message = {
            a: field0
        };
        return message;
    }
};
exports.Float64s = {
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        {
            var length0 = message.a.length;
            view.writeUint32(length0);
            for (var i0 = 0; i0 < length0; i0++) {
                view.writeFloat64(message.a[i0]);
            }
        }
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var field0;
        {
            var length0 = view.readUint32();
            field0 = new Array(length0);
            for (var i0 = 0; i0 < length0; i0++) {
                var x0 = void 0;
                x0 = view.readFloat64();
                field0[i0] = x0;
            }
        }
        var message = {
            a: field0
        };
        return message;
    }
};
var VideoCodec;
(function (VideoCodec) {
    VideoCodec[VideoCodec["H264"] = 0] = "H264";
    VideoCodec[VideoCodec["H265"] = 1] = "H265";
})(VideoCodec = exports.VideoCodec || (exports.VideoCodec = {}));
exports.VideoData = {
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        view.writeFloat64(message.time);
        view.writeUint32(message.width);
        view.writeUint32(message.height);
        view.writeBytes(message.fragment);
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var field0;
        field0 = view.readFloat64();
        var field1;
        field1 = view.readUint32();
        var field2;
        field2 = view.readUint32();
        var field3;
        field3 = view.readBytes();
        var message = {
            time: field0,
            width: field1,
            height: field2,
            fragment: field3
        };
        return message;
    }
};
exports.MediaMessage = {
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        var pos = view.reserveMessageLength();
        var start = view.length;
        if (message.codec != null) {
            view.writeByte(1);
            view.writeUint32(message.codec);
        }
        if (message.data != null) {
            view.writeByte(2);
            exports.VideoData.encodeInto(message.data, view);
        }
        view.writeByte(0);
        var end = view.length;
        view.fillMessageLength(pos, end - start);
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var message = {};
        var length = view.readMessageLength();
        var end = view.index + length;
        while (true) {
            switch (view.readByte()) {
                case 0:
                    return message;
                case 1:
                    message.codec = view.readUint32();
                    break;
                case 2:
                    message.data = exports.VideoData.readFrom(view);
                    break;
                default:
                    view.index = end;
                    return message;
            }
        }
    }
};
exports.SkipTestOld = {
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        var pos = view.reserveMessageLength();
        var start = view.length;
        if (message.x != null) {
            view.writeByte(1);
            view.writeInt32(message.x);
        }
        if (message.y != null) {
            view.writeByte(2);
            view.writeInt32(message.y);
        }
        view.writeByte(0);
        var end = view.length;
        view.fillMessageLength(pos, end - start);
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var message = {};
        var length = view.readMessageLength();
        var end = view.index + length;
        while (true) {
            switch (view.readByte()) {
                case 0:
                    return message;
                case 1:
                    message.x = view.readInt32();
                    break;
                case 2:
                    message.y = view.readInt32();
                    break;
                default:
                    view.index = end;
                    return message;
            }
        }
    }
};
exports.SkipTestNew = {
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        var pos = view.reserveMessageLength();
        var start = view.length;
        if (message.x != null) {
            view.writeByte(1);
            view.writeInt32(message.x);
        }
        if (message.y != null) {
            view.writeByte(2);
            view.writeInt32(message.y);
        }
        if (message.z != null) {
            view.writeByte(3);
            view.writeInt32(message.z);
        }
        view.writeByte(0);
        var end = view.length;
        view.fillMessageLength(pos, end - start);
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var message = {};
        var length = view.readMessageLength();
        var end = view.index + length;
        while (true) {
            switch (view.readByte()) {
                case 0:
                    return message;
                case 1:
                    message.x = view.readInt32();
                    break;
                case 2:
                    message.y = view.readInt32();
                    break;
                case 3:
                    message.z = view.readInt32();
                    break;
                default:
                    view.index = end;
                    return message;
            }
        }
    }
};
exports.SkipTestOldContainer = {
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        var pos = view.reserveMessageLength();
        var start = view.length;
        if (message.s != null) {
            view.writeByte(1);
            exports.SkipTestOld.encodeInto(message.s, view);
        }
        if (message.after != null) {
            view.writeByte(2);
            view.writeInt32(message.after);
        }
        view.writeByte(0);
        var end = view.length;
        view.fillMessageLength(pos, end - start);
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var message = {};
        var length = view.readMessageLength();
        var end = view.index + length;
        while (true) {
            switch (view.readByte()) {
                case 0:
                    return message;
                case 1:
                    message.s = exports.SkipTestOld.readFrom(view);
                    break;
                case 2:
                    message.after = view.readInt32();
                    break;
                default:
                    view.index = end;
                    return message;
            }
        }
    }
};
exports.SkipTestNewContainer = {
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        var pos = view.reserveMessageLength();
        var start = view.length;
        if (message.s != null) {
            view.writeByte(1);
            exports.SkipTestNew.encodeInto(message.s, view);
        }
        if (message.after != null) {
            view.writeByte(2);
            view.writeInt32(message.after);
        }
        view.writeByte(0);
        var end = view.length;
        view.fillMessageLength(pos, end - start);
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var message = {};
        var length = view.readMessageLength();
        var end = view.index + length;
        while (true) {
            switch (view.readByte()) {
                case 0:
                    return message;
                case 1:
                    message.s = exports.SkipTestNew.readFrom(view);
                    break;
                case 2:
                    message.after = view.readInt32();
                    break;
                default:
                    view.index = end;
                    return message;
            }
        }
    }
};
exports.M = {
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        var pos = view.reserveMessageLength();
        var start = view.length;
        if (message.a != null) {
            view.writeByte(1);
            view.writeFloat32(message.a);
        }
        if (message.b != null) {
            view.writeByte(2);
            view.writeFloat64(message.b);
        }
        view.writeByte(0);
        var end = view.length;
        view.fillMessageLength(pos, end - start);
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var message = {};
        var length = view.readMessageLength();
        var end = view.index + length;
        while (true) {
            switch (view.readByte()) {
                case 0:
                    return message;
                case 1:
                    message.a = view.readFloat32();
                    break;
                case 2:
                    message.b = view.readFloat64();
                    break;
                default:
                    view.index = end;
                    return message;
            }
        }
    }
};
exports.S = {
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        view.writeInt32(message.x);
        view.writeInt32(message.y);
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var field0;
        field0 = view.readInt32();
        var field1;
        field1 = view.readInt32();
        var message = {
            x: field0,
            y: field1
        };
        return message;
    }
};
exports.SomeMaps = {
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var e_2, _a, e_3, _b, e_4, _c, e_5, _d, e_6, _e, e_7, _f, e_8, _g;
        var before = view.length;
        view.writeUint32(message.m1.size);
        try {
            for (var _h = __values(message.m1), _j = _h.next(); !_j.done; _j = _h.next()) {
                var _k = __read(_j.value, 2), k0 = _k[0], v0 = _k[1];
                view.writeByte(Number(k0));
                view.writeByte(Number(v0));
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_j && !_j.done && (_a = _h["return"])) _a.call(_h);
            }
            finally { if (e_2) throw e_2.error; }
        }
        view.writeUint32(message.m2.size);
        try {
            for (var _l = __values(message.m2), _m = _l.next(); !_m.done; _m = _l.next()) {
                var _o = __read(_m.value, 2), k0 = _o[0], v0 = _o[1];
                view.writeString(k0);
                view.writeUint32(v0.size);
                try {
                    for (var v0_1 = (e_4 = void 0, __values(v0)), v0_1_1 = v0_1.next(); !v0_1_1.done; v0_1_1 = v0_1.next()) {
                        var _p = __read(v0_1_1.value, 2), k1 = _p[0], v1 = _p[1];
                        view.writeString(k1);
                        view.writeString(v1);
                    }
                }
                catch (e_4_1) { e_4 = { error: e_4_1 }; }
                finally {
                    try {
                        if (v0_1_1 && !v0_1_1.done && (_c = v0_1["return"])) _c.call(v0_1);
                    }
                    finally { if (e_4) throw e_4.error; }
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_m && !_m.done && (_b = _l["return"])) _b.call(_l);
            }
            finally { if (e_3) throw e_3.error; }
        }
        {
            var length0 = message.m3.length;
            view.writeUint32(length0);
            for (var i0 = 0; i0 < length0; i0++) {
                view.writeUint32(message.m3[i0].size);
                try {
                    for (var _q = (e_5 = void 0, __values(message.m3[i0])), _r = _q.next(); !_r.done; _r = _q.next()) {
                        var _s = __read(_r.value, 2), k1 = _s[0], v1 = _s[1];
                        view.writeInt32(k1);
                        {
                            var length2 = v1.length;
                            view.writeUint32(length2);
                            for (var i2 = 0; i2 < length2; i2++) {
                                view.writeUint32(v1[i2].size);
                                try {
                                    for (var _t = (e_6 = void 0, __values(v1[i2])), _u = _t.next(); !_u.done; _u = _t.next()) {
                                        var _v = __read(_u.value, 2), k3 = _v[0], v3 = _v[1];
                                        view.writeByte(Number(k3));
                                        exports.S.encodeInto(v3, view);
                                    }
                                }
                                catch (e_6_1) { e_6 = { error: e_6_1 }; }
                                finally {
                                    try {
                                        if (_u && !_u.done && (_e = _t["return"])) _e.call(_t);
                                    }
                                    finally { if (e_6) throw e_6.error; }
                                }
                            }
                        }
                    }
                }
                catch (e_5_1) { e_5 = { error: e_5_1 }; }
                finally {
                    try {
                        if (_r && !_r.done && (_d = _q["return"])) _d.call(_q);
                    }
                    finally { if (e_5) throw e_5.error; }
                }
            }
        }
        {
            var length0 = message.m4.length;
            view.writeUint32(length0);
            for (var i0 = 0; i0 < length0; i0++) {
                view.writeUint32(message.m4[i0].size);
                try {
                    for (var _w = (e_7 = void 0, __values(message.m4[i0])), _x = _w.next(); !_x.done; _x = _w.next()) {
                        var _y = __read(_x.value, 2), k1 = _y[0], v1 = _y[1];
                        view.writeString(k1);
                        {
                            var length2 = v1.length;
                            view.writeUint32(length2);
                            for (var i2 = 0; i2 < length2; i2++) {
                                view.writeFloat32(v1[i2]);
                            }
                        }
                    }
                }
                catch (e_7_1) { e_7 = { error: e_7_1 }; }
                finally {
                    try {
                        if (_x && !_x.done && (_f = _w["return"])) _f.call(_w);
                    }
                    finally { if (e_7) throw e_7.error; }
                }
            }
        }
        view.writeUint32(message.m5.size);
        try {
            for (var _z = __values(message.m5), _0 = _z.next(); !_0.done; _0 = _z.next()) {
                var _1 = __read(_0.value, 2), k0 = _1[0], v0 = _1[1];
                view.writeGuid(k0);
                exports.M.encodeInto(v0, view);
            }
        }
        catch (e_8_1) { e_8 = { error: e_8_1 }; }
        finally {
            try {
                if (_0 && !_0.done && (_g = _z["return"])) _g.call(_z);
            }
            finally { if (e_8) throw e_8.error; }
        }
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var field0;
        {
            var length0 = view.readUint32();
            field0 = new Map();
            for (var i0 = 0; i0 < length0; i0++) {
                var k0 = void 0;
                var v0 = void 0;
                k0 = !!view.readByte();
                v0 = !!view.readByte();
                field0.set(k0, v0);
            }
        }
        var field1;
        {
            var length0 = view.readUint32();
            field1 = new Map();
            for (var i0 = 0; i0 < length0; i0++) {
                var k0 = void 0;
                var v0 = void 0;
                k0 = view.readString();
                {
                    var length1 = view.readUint32();
                    v0 = new Map();
                    for (var i1 = 0; i1 < length1; i1++) {
                        var k1 = void 0;
                        var v1 = void 0;
                        k1 = view.readString();
                        v1 = view.readString();
                        v0.set(k1, v1);
                    }
                }
                field1.set(k0, v0);
            }
        }
        var field2;
        {
            var length0 = view.readUint32();
            field2 = new Array(length0);
            for (var i0 = 0; i0 < length0; i0++) {
                var x0 = void 0;
                {
                    var length1 = view.readUint32();
                    x0 = new Map();
                    for (var i1 = 0; i1 < length1; i1++) {
                        var k1 = void 0;
                        var v1 = void 0;
                        k1 = view.readInt32();
                        {
                            var length2 = view.readUint32();
                            v1 = new Array(length2);
                            for (var i2 = 0; i2 < length2; i2++) {
                                var x2 = void 0;
                                {
                                    var length3 = view.readUint32();
                                    x2 = new Map();
                                    for (var i3 = 0; i3 < length3; i3++) {
                                        var k3 = void 0;
                                        var v3 = void 0;
                                        k3 = !!view.readByte();
                                        v3 = exports.S.readFrom(view);
                                        x2.set(k3, v3);
                                    }
                                }
                                v1[i2] = x2;
                            }
                        }
                        x0.set(k1, v1);
                    }
                }
                field2[i0] = x0;
            }
        }
        var field3;
        {
            var length0 = view.readUint32();
            field3 = new Array(length0);
            for (var i0 = 0; i0 < length0; i0++) {
                var x0 = void 0;
                {
                    var length1 = view.readUint32();
                    x0 = new Map();
                    for (var i1 = 0; i1 < length1; i1++) {
                        var k1 = void 0;
                        var v1 = void 0;
                        k1 = view.readString();
                        {
                            var length2 = view.readUint32();
                            v1 = new Array(length2);
                            for (var i2 = 0; i2 < length2; i2++) {
                                var x2 = void 0;
                                x2 = view.readFloat32();
                                v1[i2] = x2;
                            }
                        }
                        x0.set(k1, v1);
                    }
                }
                field3[i0] = x0;
            }
        }
        var field4;
        {
            var length0 = view.readUint32();
            field4 = new Map();
            for (var i0 = 0; i0 < length0; i0++) {
                var k0 = void 0;
                var v0 = void 0;
                k0 = view.readGuid();
                v0 = exports.M.readFrom(view);
                field4.set(k0, v0);
            }
        }
        var message = {
            m1: field0,
            m2: field1,
            m3: field2,
            m4: field3,
            m5: field4
        };
        return message;
    }
};
exports.ExampleMessage = {
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        var pos = view.reserveMessageLength();
        var start = view.length;
        if (message.x != null) {
            view.writeByte(1);
            view.writeByte(message.x);
        }
        if (message.y != null) {
            view.writeByte(2);
            view.writeInt16(message.y);
        }
        if (message.z != null) {
            view.writeByte(3);
            view.writeInt32(message.z);
        }
        view.writeByte(0);
        var end = view.length;
        view.fillMessageLength(pos, end - start);
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var message = {};
        var length = view.readMessageLength();
        var end = view.index + length;
        while (true) {
            switch (view.readByte()) {
                case 0:
                    return message;
                case 1:
                    message.x = view.readByte();
                    break;
                case 2:
                    message.y = view.readInt16();
                    break;
                case 3:
                    message.z = view.readInt32();
                    break;
                default:
                    view.index = end;
                    return message;
            }
        }
    }
};
exports.ReadOnlyMap = {
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var e_9, _a;
        var before = view.length;
        var pos = view.reserveMessageLength();
        var start = view.length;
        if (message.vals != null) {
            view.writeByte(1);
            view.writeUint32(message.vals.size);
            try {
                for (var _b = __values(message.vals), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var _d = __read(_c.value, 2), k0 = _d[0], v0 = _d[1];
                    view.writeString(k0);
                    view.writeByte(v0);
                }
            }
            catch (e_9_1) { e_9 = { error: e_9_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
                }
                finally { if (e_9) throw e_9.error; }
            }
        }
        view.writeByte(0);
        var end = view.length;
        view.fillMessageLength(pos, end - start);
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var message = {};
        var length = view.readMessageLength();
        var end = view.index + length;
        while (true) {
            switch (view.readByte()) {
                case 0:
                    return message;
                case 1:
                    {
                        var length0 = view.readUint32();
                        message.vals = new Map();
                        for (var i0 = 0; i0 < length0; i0++) {
                            var k0 = void 0;
                            var v0 = void 0;
                            k0 = view.readString();
                            v0 = view.readByte();
                            message.vals.set(k0, v0);
                        }
                    }
                    break;
                default:
                    view.index = end;
                    return message;
            }
        }
    }
};
exports.MsgpackComparison = {
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        view.writeByte(message.iNT0);
        view.writeByte(message.iNT1);
        view.writeInt16(message.iNT1_);
        view.writeByte(message.iNT8);
        view.writeInt16(message.iNT8_);
        view.writeInt16(message.iNT16);
        view.writeInt16(message.iNT16_);
        view.writeInt32(message.iNT32);
        view.writeInt32(message.iNT32_);
        view.writeByte(Number(message["true"]));
        view.writeByte(Number(message["false"]));
        view.writeFloat64(message.float);
        view.writeFloat64(message.fLOAT_x);
        view.writeString(message.sTRING0);
        view.writeString(message.sTRING1);
        view.writeString(message.sTRING4);
        view.writeString(message.sTRING8);
        view.writeString(message.sTRING16);
        {
            var length0 = message.aRRAY0.length;
            view.writeUint32(length0);
            for (var i0 = 0; i0 < length0; i0++) {
                view.writeInt32(message.aRRAY0[i0]);
            }
        }
        {
            var length0 = message.aRRAY1.length;
            view.writeUint32(length0);
            for (var i0 = 0; i0 < length0; i0++) {
                view.writeString(message.aRRAY1[i0]);
            }
        }
        {
            var length0 = message.aRRAY8.length;
            view.writeUint32(length0);
            for (var i0 = 0; i0 < length0; i0++) {
                view.writeInt32(message.aRRAY8[i0]);
            }
        }
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var field0;
        field0 = view.readByte();
        var field1;
        field1 = view.readByte();
        var field2;
        field2 = view.readInt16();
        var field3;
        field3 = view.readByte();
        var field4;
        field4 = view.readInt16();
        var field5;
        field5 = view.readInt16();
        var field6;
        field6 = view.readInt16();
        var field7;
        field7 = view.readInt32();
        var field8;
        field8 = view.readInt32();
        var field9;
        field9 = !!view.readByte();
        var field10;
        field10 = !!view.readByte();
        var field11;
        field11 = view.readFloat64();
        var field12;
        field12 = view.readFloat64();
        var field13;
        field13 = view.readString();
        var field14;
        field14 = view.readString();
        var field15;
        field15 = view.readString();
        var field16;
        field16 = view.readString();
        var field17;
        field17 = view.readString();
        var field18;
        {
            var length0 = view.readUint32();
            field18 = new Array(length0);
            for (var i0 = 0; i0 < length0; i0++) {
                var x0 = void 0;
                x0 = view.readInt32();
                field18[i0] = x0;
            }
        }
        var field19;
        {
            var length0 = view.readUint32();
            field19 = new Array(length0);
            for (var i0 = 0; i0 < length0; i0++) {
                var x0 = void 0;
                x0 = view.readString();
                field19[i0] = x0;
            }
        }
        var field20;
        {
            var length0 = view.readUint32();
            field20 = new Array(length0);
            for (var i0 = 0; i0 < length0; i0++) {
                var x0 = void 0;
                x0 = view.readInt32();
                field20[i0] = x0;
            }
        }
        var message = {
            iNT0: field0,
            iNT1: field1,
            iNT1_: field2,
            iNT8: field3,
            iNT8_: field4,
            iNT16: field5,
            iNT16_: field6,
            iNT32: field7,
            iNT32_: field8,
            "true": field9,
            "false": field10,
            float: field11,
            fLOAT_x: field12,
            sTRING0: field13,
            sTRING1: field14,
            sTRING4: field15,
            sTRING8: field16,
            sTRING16: field17,
            aRRAY0: field18,
            aRRAY1: field19,
            aRRAY8: field20
        };
        return message;
    }
};
exports.NumericalASCIIOpCode = {
    opcode: 0x34333231,
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var message = {};
        return message;
    }
};
exports.NumericalASCIIOpCode2 = {
    opcode: 0x31323335,
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var message = {};
        return message;
    }
};
exports.NumericalASCIIOpCode3 = {
    opcode: 0x32323334,
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var message = {};
        return message;
    }
};
exports.NumericalASCIIOpCode4 = {
    opcode: 0x34333232,
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var message = {};
        return message;
    }
};
var FurnitureFamily;
(function (FurnitureFamily) {
    FurnitureFamily[FurnitureFamily["Bed"] = 0] = "Bed";
    FurnitureFamily[FurnitureFamily["Table"] = 1] = "Table";
    FurnitureFamily[FurnitureFamily["Shoe"] = 2] = "Shoe";
})(FurnitureFamily = exports.FurnitureFamily || (exports.FurnitureFamily = {}));
exports.Furniture = {
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        view.writeString(message.name);
        view.writeUint32(message.price);
        view.writeUint32(message.family);
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var field0;
        field0 = view.readString();
        var field1;
        field1 = view.readUint32();
        var field2;
        field2 = view.readUint32();
        var message = {
            name: field0,
            price: field1,
            family: field2
        };
        return message;
    }
};
exports.RequestCatalog = {
    opcode: 0x41454B49,
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        var pos = view.reserveMessageLength();
        var start = view.length;
        if (message.family != null) {
            view.writeByte(1);
            view.writeUint32(message.family);
        }
        view.writeByte(0);
        var end = view.length;
        view.fillMessageLength(pos, end - start);
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var message = {};
        var length = view.readMessageLength();
        var end = view.index + length;
        while (true) {
            switch (view.readByte()) {
                case 0:
                    return message;
                case 1:
                    message.family = view.readUint32();
                    break;
                case 2:
                    message.secretTunnel = view.readString();
                    break;
                default:
                    view.index = end;
                    return message;
            }
        }
    }
};
exports.RequestResponse = {
    opcode: 0x31323334,
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        {
            var length0 = message.availableFurniture.length;
            view.writeUint32(length0);
            for (var i0 = 0; i0 < length0; i0++) {
                exports.Furniture.encodeInto(message.availableFurniture[i0], view);
            }
        }
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var field0;
        {
            var length0 = view.readUint32();
            field0 = new Array(length0);
            for (var i0 = 0; i0 < length0; i0++) {
                var x0 = void 0;
                x0 = exports.Furniture.readFrom(view);
                field0[i0] = x0;
            }
        }
        var message = {
            availableFurniture: field0
        };
        return message;
    }
};
exports.PrintRequest = {
    opcode: 0x2,
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        var pos = view.reserveMessageLength();
        var start = view.length;
        if (message.print != null) {
            view.writeByte(1);
            exports.Print.encodeInto(message.print, view);
        }
        view.writeByte(0);
        var end = view.length;
        view.fillMessageLength(pos, end - start);
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var message = {};
        var length = view.readMessageLength();
        var end = view.index + length;
        while (true) {
            switch (view.readByte()) {
                case 0:
                    return message;
                case 1:
                    message.print = exports.Print.readFrom(view);
                    break;
                default:
                    view.index = end;
                    return message;
            }
        }
    }
};
exports.Print = {
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        view.writeString(message.printout);
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var field0;
        field0 = view.readString();
        var message = {
            printout: field0
        };
        return message;
    }
};
exports.AddRequest = {
    opcode: 0x1,
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        var pos = view.reserveMessageLength();
        var start = view.length;
        if (message.add != null) {
            view.writeByte(1);
            exports.Add.encodeInto(message.add, view);
        }
        view.writeByte(0);
        var end = view.length;
        view.fillMessageLength(pos, end - start);
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var message = {};
        var length = view.readMessageLength();
        var end = view.index + length;
        while (true) {
            switch (view.readByte()) {
                case 0:
                    return message;
                case 1:
                    message.add = exports.Add.readFrom(view);
                    break;
                default:
                    view.index = end;
                    return message;
            }
        }
    }
};
exports.Add = {
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        view.writeInt32(message.a);
        view.writeInt32(message.b);
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var field0;
        field0 = view.readInt32();
        var field1;
        field1 = view.readInt32();
        var message = {
            a: field0,
            b: field1
        };
        return message;
    }
};
exports.AddResponse = {
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        view.writeInt32(message.c);
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var field0;
        field0 = view.readInt32();
        var message = {
            c: field0
        };
        return message;
    }
};
exports.TaggedStruct = {
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        view.writeString(message.foo);
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var field0;
        field0 = view.readString();
        var message = {
            foo: field0
        };
        return message;
    }
};
exports.TaggedMessage = {
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        var pos = view.reserveMessageLength();
        var start = view.length;
        if (message.bar != null) {
            view.writeByte(1);
            view.writeByte(message.bar);
        }
        view.writeByte(0);
        var end = view.length;
        view.fillMessageLength(pos, end - start);
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var message = {};
        var length = view.readMessageLength();
        var end = view.index + length;
        while (true) {
            switch (view.readByte()) {
                case 0:
                    return message;
                case 1:
                    message.bar = view.readByte();
                    break;
                default:
                    view.index = end;
                    return message;
            }
        }
    }
};
exports.TaggedSubStruct = {
    discriminator: 1,
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        view.writeGuid(message.biz);
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var field0;
        field0 = view.readGuid();
        var message = {
            biz: field0
        };
        return message;
    }
};
exports.TaggedUnion = {
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        var pos = view.reserveMessageLength();
        var start = view.length + 1;
        view.writeByte(message.discriminator);
        switch (message.discriminator) {
            case 1:
                exports.TaggedSubStruct.encodeInto(message.value, view);
                break;
        }
        var end = view.length;
        view.fillMessageLength(pos, end - start);
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var length = view.readMessageLength();
        var end = view.index + 1 + length;
        switch (view.readByte()) {
            case 1:
                return { discriminator: 1, value: exports.TaggedSubStruct.readFrom(view) };
            default:
                view.index = end;
                throw new bebop_1.BebopRuntimeError("Unrecognized discriminator while decoding TaggedUnion");
        }
    }
};
exports.A = {
    discriminator: 1,
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        var pos = view.reserveMessageLength();
        var start = view.length;
        if (message.b != null) {
            view.writeByte(1);
            view.writeUint32(message.b);
        }
        view.writeByte(0);
        var end = view.length;
        view.fillMessageLength(pos, end - start);
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var message = {};
        var length = view.readMessageLength();
        var end = view.index + length;
        while (true) {
            switch (view.readByte()) {
                case 0:
                    return message;
                case 1:
                    message.b = view.readUint32();
                    break;
                default:
                    view.index = end;
                    return message;
            }
        }
    }
};
exports.B = {
    discriminator: 2,
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        view.writeByte(Number(message.c));
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var field0;
        field0 = !!view.readByte();
        var message = {
            c: field0
        };
        return message;
    }
};
exports.C = {
    discriminator: 3,
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var message = {};
        return message;
    }
};
exports.U = {
    opcode: 0x68616579,
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        var pos = view.reserveMessageLength();
        var start = view.length + 1;
        view.writeByte(message.discriminator);
        switch (message.discriminator) {
            case 1:
                exports.A.encodeInto(message.value, view);
                break;
            case 2:
                exports.B.encodeInto(message.value, view);
                break;
            case 3:
                exports.C.encodeInto(message.value, view);
                break;
        }
        var end = view.length;
        view.fillMessageLength(pos, end - start);
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var length = view.readMessageLength();
        var end = view.index + 1 + length;
        switch (view.readByte()) {
            case 1:
                return { discriminator: 1, value: exports.A.readFrom(view) };
            case 2:
                return { discriminator: 2, value: exports.B.readFrom(view) };
            case 3:
                return { discriminator: 3, value: exports.C.readFrom(view) };
            default:
                view.index = end;
                throw new bebop_1.BebopRuntimeError("Unrecognized discriminator while decoding U");
        }
    }
};
exports.Cons = {
    discriminator: 1,
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        view.writeUint32(message.head);
        exports.List.encodeInto(message.tail, view);
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var field0;
        field0 = view.readUint32();
        var field1;
        field1 = exports.List.readFrom(view);
        var message = {
            head: field0,
            tail: field1
        };
        return message;
    }
};
exports.Null = {
    discriminator: 2,
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var message = {};
        return message;
    }
};
exports.List = {
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        var pos = view.reserveMessageLength();
        var start = view.length + 1;
        view.writeByte(message.discriminator);
        switch (message.discriminator) {
            case 1:
                exports.Cons.encodeInto(message.value, view);
                break;
            case 2:
                exports.Null.encodeInto(message.value, view);
                break;
        }
        var end = view.length;
        view.fillMessageLength(pos, end - start);
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var length = view.readMessageLength();
        var end = view.index + 1 + length;
        switch (view.readByte()) {
            case 1:
                return { discriminator: 1, value: exports.Cons.readFrom(view) };
            case 2:
                return { discriminator: 2, value: exports.Null.readFrom(view) };
            default:
                view.index = end;
                throw new bebop_1.BebopRuntimeError("Unrecognized discriminator while decoding List");
        }
    }
};
exports.U3 = {
    discriminator: 1,
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        view.writeUint32(message.hello);
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var field0;
        field0 = view.readUint32();
        var message = {
            hello: field0
        };
        return message;
    }
};
exports.U4 = {
    discriminator: 2,
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        var pos = view.reserveMessageLength();
        var start = view.length;
        if (message.goodbye != null) {
            view.writeByte(1);
            view.writeUint32(message.goodbye);
        }
        view.writeByte(0);
        var end = view.length;
        view.fillMessageLength(pos, end - start);
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var message = {};
        var length = view.readMessageLength();
        var end = view.index + length;
        while (true) {
            switch (view.readByte()) {
                case 0:
                    return message;
                case 1:
                    message.goodbye = view.readUint32();
                    break;
                default:
                    view.index = end;
                    return message;
            }
        }
    }
};
exports.U5 = {
    discriminator: 3,
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        var pos = view.reserveMessageLength();
        var start = view.length;
        if (message.goodbye != null) {
            view.writeByte(1);
            view.writeUint32(message.goodbye);
        }
        view.writeByte(0);
        var end = view.length;
        view.fillMessageLength(pos, end - start);
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var message = {};
        var length = view.readMessageLength();
        var end = view.index + length;
        while (true) {
            switch (view.readByte()) {
                case 0:
                    return message;
                case 1:
                    message.goodbye = view.readUint32();
                    break;
                default:
                    view.index = end;
                    return message;
            }
        }
    }
};
exports.U6 = {
    discriminator: 4,
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        view.writeUint32(message.hello);
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var field0;
        field0 = view.readUint32();
        var message = {
            hello: field0
        };
        return message;
    }
};
exports.U2 = {
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        var pos = view.reserveMessageLength();
        var start = view.length + 1;
        view.writeByte(message.discriminator);
        switch (message.discriminator) {
            case 1:
                exports.U3.encodeInto(message.value, view);
                break;
            case 2:
                exports.U4.encodeInto(message.value, view);
                break;
            case 3:
                exports.U5.encodeInto(message.value, view);
                break;
            case 4:
                exports.U6.encodeInto(message.value, view);
                break;
        }
        var end = view.length;
        view.fillMessageLength(pos, end - start);
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var length = view.readMessageLength();
        var end = view.index + 1 + length;
        switch (view.readByte()) {
            case 1:
                return { discriminator: 1, value: exports.U3.readFrom(view) };
            case 2:
                return { discriminator: 2, value: exports.U4.readFrom(view) };
            case 3:
                return { discriminator: 3, value: exports.U5.readFrom(view) };
            case 4:
                return { discriminator: 4, value: exports.U6.readFrom(view) };
            default:
                view.index = end;
                throw new bebop_1.BebopRuntimeError("Unrecognized discriminator while decoding U2");
        }
    }
};
exports.WithUnionField = {
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        var pos = view.reserveMessageLength();
        var start = view.length;
        if (message.test != null) {
            view.writeByte(1);
            exports.List2.encodeInto(message.test, view);
        }
        view.writeByte(0);
        var end = view.length;
        view.fillMessageLength(pos, end - start);
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var message = {};
        var length = view.readMessageLength();
        var end = view.index + length;
        while (true) {
            switch (view.readByte()) {
                case 0:
                    return message;
                case 1:
                    message.test = exports.List2.readFrom(view);
                    break;
                default:
                    view.index = end;
                    return message;
            }
        }
    }
};
exports.Cons2 = {
    discriminator: 1,
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        view.writeUint32(message.head);
        exports.List.encodeInto(message.tail, view);
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var field0;
        field0 = view.readUint32();
        var field1;
        field1 = exports.List.readFrom(view);
        var message = {
            head: field0,
            tail: field1
        };
        return message;
    }
};
exports.Nil2 = {
    discriminator: 2,
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var message = {};
        return message;
    }
};
exports.List2 = {
    encode: function (message) {
        var view = bebop_1.BebopView.getInstance();
        view.startWriting();
        this.encodeInto(message, view);
        return view.toArray();
    },
    encodeInto: function (message, view) {
        var before = view.length;
        var pos = view.reserveMessageLength();
        var start = view.length + 1;
        view.writeByte(message.discriminator);
        switch (message.discriminator) {
            case 1:
                exports.Cons2.encodeInto(message.value, view);
                break;
            case 2:
                exports.Nil2.encodeInto(message.value, view);
                break;
        }
        var end = view.length;
        view.fillMessageLength(pos, end - start);
        var after = view.length;
        return after - before;
    },
    decode: function (buffer) {
        var view = bebop_1.BebopView.getInstance();
        view.startReading(buffer);
        return this.readFrom(view);
    },
    readFrom: function (view) {
        var length = view.readMessageLength();
        var end = view.index + 1 + length;
        switch (view.readByte()) {
            case 1:
                return { discriminator: 1, value: exports.Cons2.readFrom(view) };
            case 2:
                return { discriminator: 2, value: exports.Nil2.readFrom(view) };
            default:
                view.index = end;
                throw new bebop_1.BebopRuntimeError("Unrecognized discriminator while decoding List2");
        }
    }
};

var fs = require("fs");

eval(fs.readFileSync(0).toString())